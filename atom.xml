<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厚积薄发</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-30T09:00:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>人生实苦，但请你足够相信</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MultiMS_filebench</title>
    <link href="http://yoursite.com/2017/08/30/MultiMS-filebench/"/>
    <id>http://yoursite.com/2017/08/30/MultiMS-filebench/</id>
    <published>2017-08-30T09:00:08.000Z</published>
    <updated>2017-08-30T09:00:50.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>filebench测试</title>
    <link href="http://yoursite.com/2017/08/29/filebench/"/>
    <id>http://yoursite.com/2017/08/29/filebench/</id>
    <published>2017-08-29T03:38:29.000Z</published>
    <updated>2017-08-29T08:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-filebench下载"><a href="#1-filebench下载" class="headerlink" title="1.filebench下载"></a>1.filebench下载</h2><p>客户端安装：<a href="https://github.com/zfsonlinux/filebench" target="_blank" rel="external">filebench</a>       </p>
<p>系统:SUSE Linux Enterprise Server 11 SP1  (x86_64)       </p>
<blockquote>
<p>Filebench is a file system and storage benchmark that can generate a large<br>variety of workloads. Unlike typical benchmarks it is extremely flexible and<br>allows to specify application’s I/O behavior using its extensive Workload Model<br>Language (WML).       </p>
</blockquote>
<h2 id="2-用户自定义工作负载"><a href="#2-用户自定义工作负载" class="headerlink" title="2.用户自定义工作负载"></a>2.用户自定义工作负载</h2><p>示例：<br>一个负载包含2个进程，其中每个进程又含有三个线程。    </p>
<pre><code>01  define fileset name=&quot;testF&quot;,entries=10000,filesize=16k,prealloc,path=&quot;/tmp&quot;
02
03  define process name=&quot;readerP&quot;,instances=2 {
04    thread name=&quot;readerT&quot;,instances=3 {
05      flowop openfile name=&quot;openOP&quot;,filesetname=&quot;testF&quot;
06      flowop readwholefile name=&quot;readOP&quot;,filesetname=&quot;testF&quot;
07      flowop closefile name=&quot;closeOP&quot;
08    }
09  }
10
11  run 60
</code></pre><p>第1行定义了一个fileset, 它位于/tmp，这个set有10,000个项，每个项大小为16k。</p>
<blockquote>
<p>Filebench is instructed to<br>precreate all files in the fileset before executing the actual workload.    </p>
</blockquote>
<p>3-4行定义了两个同样的进程，每个包含三个相同的线程。    </p>
<blockquote>
<p>Every thread in Filebench repeats flowops (operations)<br>defined in it in a loop.    </p>
</blockquote>
<p>5-7行描述了flowops:    </p>
<blockquote>
<p>open a file in “testF” fileset, read the file  completely, and close<br>it.    </p>
</blockquote>
<p>最后一行指定运行这个负载的时间为60s。    </p>
<blockquote>
<p>Assuming that the personality is saved in ‘readfiles.f’ file, one can then<br>generate corresponding workload by running ‘filebench -f readfiles.f’ command.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-filebench下载&quot;&gt;&lt;a href=&quot;#1-filebench下载&quot; class=&quot;headerlink&quot; title=&quot;1.filebench下载&quot;&gt;&lt;/a&gt;1.filebench下载&lt;/h2&gt;&lt;p&gt;客户端安装：&lt;a href=&quot;https://git
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CLion中的apue编译问题</title>
    <link href="http://yoursite.com/2017/08/22/apue-h/"/>
    <id>http://yoursite.com/2017/08/22/apue-h/</id>
    <published>2017-08-22T03:59:53.000Z</published>
    <updated>2017-08-22T04:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触CLion, 编译apue里的文件时候出了问题，还是说”apue.h”找不到，err_sys这些没有。<br>网上有的写的东西简直是误人子弟，其实很简单，之前的操作已经把apue.h放到了/usr/include/目录下，我们要做的就是：<br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/apueh.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触CLion, 编译apue里的文件时候出了问题，还是说”apue.h”找不到，err_sys这些没有。&lt;br&gt;网上有的写的东西简直是误人子弟，其实很简单，之前的操作已经把apue.h放到了/usr/include/目录下，我们要做的就是：&lt;br&gt;&lt;img src=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>apue_hole遇到的坑</title>
    <link href="http://yoursite.com/2017/08/22/apue-hole/"/>
    <id>http://yoursite.com/2017/08/22/apue-hole/</id>
    <published>2017-08-22T03:34:54.000Z</published>
    <updated>2017-08-29T08:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-编译c文件出错"><a href="#1-编译c文件出错" class="headerlink" title="1.编译c文件出错"></a>1.编译c文件出错</h2><p><strong>报错如下：</strong><br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/apue_hole.png" alt=""></p>
<p>看到<strong>clang error</strong></p>
<blockquote>
<p>clang是一个C、C++、Objective-C和Objective-C++编程语言的编译器前端。它采用了底层虚拟机（LLVM）作为其后端。</p>
</blockquote>
<p>然后用gcc编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc-7 -o hole file_hole.c</div></pre></td></tr></table></figure></p>
<p><strong>报错如下：</strong><br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/apu_hole1.png" alt=""></p>
<p>额。。。再回去看源码发现是把creat函数写成了create…</p>
<p>改过来之后，ok<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  ~ ls -l file.hole		</div><div class="line">-rw-r--r--  1 xxx  staff  16394 Aug 22 11:48 file.hole    </div><div class="line">➜  ~ od -c file.hole</div><div class="line">0000000    a   b   c   d   e   f   g   h   i   j  \0  \0  \0  \0  \0  \0</div><div class="line">0000020   \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</div><div class="line">*</div><div class="line">0040000    A   B   C   D   E   F   G   H   I   J</div><div class="line">0040012</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-编译c文件出错&quot;&gt;&lt;a href=&quot;#1-编译c文件出错&quot; class=&quot;headerlink&quot; title=&quot;1.编译c文件出错&quot;&gt;&lt;/a&gt;1.编译c文件出错&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;报错如下：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sed用法</title>
    <link href="http://yoursite.com/2017/08/13/sed/"/>
    <id>http://yoursite.com/2017/08/13/sed/</id>
    <published>2017-08-13T07:26:01.000Z</published>
    <updated>2017-08-21T04:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><blockquote>
<p>sed is a stream editor. A stream editor is used to perform basic text transformations on an input stream (a file or input from a pipeline). While in some ways similar to an editor which permits scripted edits (such as ed), sed works by making only one pass over the input(s), and is consequently more efficient. But it is sed’s ability to filter text in a pipeline which particularly distinguishes it from other types of editors.    </p>
</blockquote>
<h2 id="1-删除指定行"><a href="#1-删除指定行" class="headerlink" title="1. 删除指定行"></a>1. 删除指定行</h2><p><strong>实例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">line=$(cat /etc/exports | grep -n /bwfs/fs2 | grep -v &apos;#&apos; | awk &apos;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&apos;)               </div><div class="line">if [ &quot;$line&quot; != &quot;0&quot; ]; then      </div><div class="line">    sed -i &apos;/fs2/d&apos; /etc/exports    </div><div class="line">fi</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sed&quot;&gt;&lt;a href=&quot;#sed&quot; class=&quot;headerlink&quot; title=&quot;sed&quot;&gt;&lt;/a&gt;sed&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;sed is a stream editor. A stream editor is used to pe
    
    </summary>
    
    
  </entry>
  
</feed>
