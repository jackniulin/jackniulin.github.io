<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lin Niu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-13T13:08:18.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>好好活着。</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从内核源码看如何设置陷阱门</title>
    <link href="http://yoursite.com/2018/06/13/trapgate/"/>
    <id>http://yoursite.com/2018/06/13/trapgate/</id>
    <published>2018-06-12T16:00:00.000Z</published>
    <updated>2018-06-13T13:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>以trap_init函数中set_trap_gate(0,&amp;divide_error)为例分析设置一个陷阱门的过程。<br>看这段代码可以参考这张图：<br><img src="http://ous5r4na6.bkt.clouddn.com/trapgate.png" alt=""></p>
<h2 id="1-trap-init"><a href="#1-trap-init" class="headerlink" title="1. trap_init()"></a>1. trap_init()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void trap_init(void)</div><div class="line">&#123;</div><div class="line">	int i;</div><div class="line">	//第一个参数0为中断号，第二个参数为中断程序的偏移地址   </div><div class="line">	set_trap_gate(0,&amp;divide_error);</div><div class="line">	set_trap_gate(1,&amp;debug);</div><div class="line">	set_trap_gate(2,&amp;nmi);</div><div class="line">	/*...*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-set-trap-gate"><a href="#2-set-trap-gate" class="headerlink" title="2. set_trap_gate()"></a>2. set_trap_gate()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&amp;idt[n]是中断号n在idt表中的偏移地址，中断描述符的类型为15，特权级为0</div><div class="line">#define set_trap_gate(n,addr) </div><div class="line">	_set_gate(&amp;idt[n],15,0,addr)</div></pre></td></tr></table></figure>
<h2 id="3-set-gate"><a href="#3-set-gate" class="headerlink" title="3. _set_gate()"></a>3. _set_gate()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#define _set_gate(gate_addr,type,dpl,addr) </div><div class="line">__asm__ (&quot;movw %%dx,%%ax\n\t&quot; </div><div class="line">	&quot;movw %0,%%dx\n\t&quot; </div><div class="line">	&quot;movl %%eax,%1\n\t&quot; </div><div class="line">	&quot;movl %%edx,%2&quot; </div><div class="line">	: </div><div class="line">	: &quot;i&quot; ((short) (0x8000+(dpl&lt;&lt;13)+(type&lt;&lt;8))), </div><div class="line">	&quot;o&quot; (*((char *) (gate_addr))), </div><div class="line">	&quot;o&quot; (*(4+(char *) (gate_addr))), </div><div class="line">	&quot;d&quot; ((char *) (addr)),&quot;a&quot; (0x00080000))</div></pre></td></tr></table></figure>
<p>下面逐行分析设置的过程：    </p>
<ol>
<li>movw %%dx,%%ax<br>从输入的内容看，edx存放的是中断处理程序偏移地址，这里取该偏移地址的低16位放到eax的低16位，eax原来存放的内容：0x00080000， 0x0008是内核代码段的选择符。执行后，eax存放的就是陷阱门低4字节的内容(含义如上图)   </li>
<li>movw %0,%%dx<br>%0存放的是4，5字节(从0开始)的内容，组成edx低2字节的内容.edx中原来存放的是中断处理程序的偏移地址，高2字节加前面的低2字节的内容组成陷阱门高4字节的内容。<br>后面的movl %%eax,%1； movl %%edx,%2； 就是根据前2步的结果填充gate_addr处的内容。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以trap_init函数中set_trap_gate(0,&amp;amp;divide_error)为例分析设置一个陷阱门的过程。&lt;br&gt;看这段代码可以参考这张图：&lt;br&gt;&lt;img src=&quot;http://ous5r4na6.bkt.clouddn.com/trapgate.pn
    
    </summary>
    
      <category term="kernel" scheme="http://yoursite.com/categories/kernel/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode443. String Compression</title>
    <link href="http://yoursite.com/2018/06/13/leetcode443/"/>
    <id>http://yoursite.com/2018/06/13/leetcode443/</id>
    <published>2018-06-12T16:00:00.000Z</published>
    <updated>2018-06-13T09:11:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">Given an array of characters, compress it in-place.</div><div class="line"></div><div class="line">The length after compression must always be smaller than or equal to the original array.</div><div class="line"></div><div class="line">Every element of the array should be a character (not int) of length 1.</div><div class="line"></div><div class="line">After you are done modifying the input array in-place, return the new length of the array.</div><div class="line"></div><div class="line"></div><div class="line">Follow up:</div><div class="line">Could you solve it using only O(1) extra space?</div><div class="line"></div><div class="line"></div><div class="line">Example 1:</div><div class="line">Input:</div><div class="line">[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</div><div class="line"></div><div class="line">Output:</div><div class="line">Return 6, and the first 6 characters of the input array should be: [&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</div><div class="line"></div><div class="line">Explanation:</div><div class="line">&quot;aa&quot; is replaced by &quot;a2&quot;. &quot;bb&quot; is replaced by &quot;b2&quot;. &quot;ccc&quot; is replaced by &quot;c3&quot;.</div><div class="line">Example 2:</div><div class="line">Input:</div><div class="line">[&quot;a&quot;]</div><div class="line"></div><div class="line">Output:</div><div class="line">Return 1, and the first 1 characters of the input array should be: [&quot;a&quot;]</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Nothing is replaced.</div><div class="line">Example 3:</div><div class="line">Input:</div><div class="line">[&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]</div><div class="line"></div><div class="line">Output:</div><div class="line">Return 4, and the first 4 characters of the input array should be: [&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;].</div><div class="line"></div><div class="line">Explanation:</div><div class="line">Since the character &quot;a&quot; does not repeat, it is not compressed. &quot;bbbbbbbbbbbb&quot; is replaced by &quot;b12&quot;.</div><div class="line">Notice each digit has it&apos;s own entry in the array.</div><div class="line">Note:</div><div class="line">All characters have an ASCII value in [35, 126].</div><div class="line">1 &lt;= len(chars) &lt;= 1000.</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>连续出现次数为1的只显示字符，大于1的要在字符之后显示该字符出现的次数，当字符连续出现的次数大于9时，要把这个计数值分割成单个的数字字符。<br>第一次写的代码没有考虑到题中要求的in-place原地算法，提交在leetcode上有热心网友给我提出了意见，之后修改为in-place. 大体的做法就是把i拿出来自己控制，这应该是一个技巧。count在这里起的作用：每次遍历的字符它连续出现的次数，每遍历完一次以后把count重置为0。<br>第二版的代码添加了两个类似于索引作用的index和size.index用来索引每次要处理的字符，size是为了in-place，它记录了本次应该写入的位置。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">//第一版</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int compress(vector&lt;char&gt;&amp; chars) &#123;</div><div class="line">        int count = 0;</div><div class="line">        vector&lt;char&gt; vec;</div><div class="line">        for (int i = 0; i &lt; chars.size(); ) &#123;</div><div class="line">            char tmp = chars[i];</div><div class="line">            while (tmp == chars[i]) &#123;</div><div class="line">                count++;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            if (count == 1) &#123; </div><div class="line">                vec.push_back(tmp);</div><div class="line">                count = 0;</div><div class="line">            &#125;</div><div class="line">            else if (count &gt; 1 &amp;&amp; count &lt;= 9) &#123;</div><div class="line">                vec.push_back(tmp);</div><div class="line">                vec.push_back(to_string(count)[0]);    </div><div class="line">                count = 0;</div><div class="line">            &#125; else &#123;</div><div class="line">                vec.push_back(tmp);</div><div class="line">                for (int j = 0; j &lt; to_string(count).size(); j++)</div><div class="line">                    vec.push_back(to_string(count)[j]);</div><div class="line">                count = 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        chars = vec;</div><div class="line">        return vec.size();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">//第二版</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int compress(vector&lt;char&gt;&amp; chars) &#123;</div><div class="line">        int count = 0;</div><div class="line">        vector&lt;char&gt; vec;</div><div class="line">        int index = 0, size = 0;</div><div class="line">        for (int i = 0; i &lt; chars.size(); ) &#123;</div><div class="line">            char tmp = chars[i];</div><div class="line">            while (tmp == chars[i] &amp;&amp; i &lt; chars.size()) &#123;</div><div class="line">                count++;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line">            index = i - count;</div><div class="line">            chars[size] = chars[index];</div><div class="line">            if (count == 1) &#123; </div><div class="line">                count = 0;</div><div class="line">                size++;</div><div class="line">            &#125;</div><div class="line">            else if (count &gt; 1 &amp;&amp; count &lt;= 9) &#123;</div><div class="line">                chars[size + 1] = to_string(count)[0];</div><div class="line">                size += 2;</div><div class="line">                count = 0;</div><div class="line">            &#125; else &#123;</div><div class="line">                for (int j = 1; j &lt;= to_string(count).size(); j++)</div><div class="line">                    chars[size + j] = to_string(count)[j - 1];</div><div class="line">                size = size + 1 + to_string(count).size();</div><div class="line">                count = 0;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int k = chars.size() - size; k &gt; 0; k--)</div><div class="line">            chars.pop_back();</div><div class="line">        return size;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>dup和dup2的理解</title>
    <link href="http://yoursite.com/2018/06/08/dup/"/>
    <id>http://yoursite.com/2018/06/08/dup/</id>
    <published>2018-06-08T07:41:03.000Z</published>
    <updated>2018-06-08T07:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-dup和dup2"><a href="#1-dup和dup2" class="headerlink" title="1. dup和dup2"></a>1. dup和dup2</h2><p>都用于复制现有的文件描述符。   </p>
<blockquote>
<p>int dup(int fd);<br>int dup2(int fd, int fd2);      </p>
</blockquote>
<p>区别：<br>dup返回的是当前可用文件描述符中的最小值。<br>dup2可以使用fd2指定新描述符的值。如果fd和fd2相等，dup2返回fd2， 而不关闭它。 否则，fd2的FD_CLOEXEC（执行时关闭）文件描述符的标志被清除，这样进程在调用exec时fd2时是打开状态。<br>返回的新文件描述符与fd共享同一个文件表项。   </p>
<h2 id="2-源代码分析"><a href="#2-源代码分析" class="headerlink" title="2. 源代码分析"></a>2. 源代码分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">static int dupfd(unsigned int fd, unsigned int arg)</div><div class="line">&#123;</div><div class="line">	//文件句柄的值不能超过一个程序最多打开文件数，保证当前句柄的文件结构非空</div><div class="line">	if (fd &gt;= NR_OPEN || !current-&gt;filp[fd])</div><div class="line">		return -EBADF;</div><div class="line">	if (arg &gt;= NR_OPEN)</div><div class="line">		return -EINVAL;</div><div class="line">	while (arg &lt; NR_OPEN)</div><div class="line">		if (current-&gt;filp[arg])</div><div class="line">			arg++;</div><div class="line">		else</div><div class="line">			break;</div><div class="line">	if (arg &gt;= NR_OPEN)</div><div class="line">		return -EMFILE;</div><div class="line">	//清除执行时关闭标志，即在运行exec时不会关闭dup创建的句柄。</div><div class="line">	current-&gt;close_on_exec &amp;= ~(1&lt;&lt;arg);</div><div class="line">	//指向同一个文件结构，文件引用计数+1</div><div class="line">	(current-&gt;filp[arg] = current-&gt;filp[fd])-&gt;f_count++;</div><div class="line">	return arg;</div><div class="line">&#125;</div><div class="line">int sys_dup2(unsigned int oldfd, unsigned int newfd)</div><div class="line">&#123;</div><div class="line">	//关闭文件系统调用</div><div class="line">	sys_close(newfd);</div><div class="line">	return dupfd(oldfd,newfd);</div><div class="line">&#125;</div><div class="line">sysclose:</div><div class="line">int sys_close(unsigned int fd)</div><div class="line">&#123;</div><div class="line">	struct file * filp;</div><div class="line"></div><div class="line">	if (fd &gt;= NR_OPEN)</div><div class="line">		return -EINVAL;</div><div class="line">	current-&gt;close_on_exec &amp;= ~(1&lt;&lt;fd);</div><div class="line">	if (!(filp = current-&gt;filp[fd]))</div><div class="line">		return -EINVAL;</div><div class="line">	current-&gt;filp[fd] = NULL;</div><div class="line">	//关闭之前引用计数为1说明内核出错</div><div class="line">	if (filp-&gt;f_count == 0)</div><div class="line">		panic(&quot;Close: file count is 0&quot;);</div><div class="line">	//-1之后还不为0说明有其他进程正在使用该文件</div><div class="line">	if (--filp-&gt;f_count)</div><div class="line">		return (0);</div><div class="line">	//否则释放文件的i节点结构</div><div class="line">	iput(filp-&gt;f_inode);</div><div class="line">	return (0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-dup和dup2&quot;&gt;&lt;a href=&quot;#1-dup和dup2&quot; class=&quot;headerlink&quot; title=&quot;1. dup和dup2&quot;&gt;&lt;/a&gt;1. dup和dup2&lt;/h2&gt;&lt;p&gt;都用于复制现有的文件描述符。   &lt;/p&gt;
&lt;blockquote&gt;
&lt;
    
    </summary>
    
      <category term="kernel" scheme="http://yoursite.com/categories/kernel/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode479. Largest Palindrome Product</title>
    <link href="http://yoursite.com/2018/06/08/leetcode479/"/>
    <id>http://yoursite.com/2018/06/08/leetcode479/</id>
    <published>2018-06-07T16:00:00.000Z</published>
    <updated>2018-06-08T13:53:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">你需要找到由两个 n 位数的乘积组成的最大回文数。</div><div class="line"></div><div class="line">由于结果会很大，你只需返回最大回文数 mod 1337得到的结果。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">输入: 2</div><div class="line"></div><div class="line">输出: 987</div><div class="line"></div><div class="line">解释: 99 x 91 = 9009, 9009 % 1337 = 987</div><div class="line"></div><div class="line">说明:</div><div class="line"></div><div class="line">n 的取值范围为 [1,8]。</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>这道题在leetcode上划的是easy, 很尴尬，我不会做。参考了论坛上大佬的代码。拿题中的例子来说，2位数，最大为pow(10, 2) - 1 = 99, 最小为pow(10, 1) = 10. 题中要求获得最大回文数，那就从最大的开始，构建回文串。第一个回文串为9999. 从max开始，依次遍历，只要存在num % j == 0, 就返回这个回文串%1337.</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int largestPalindrome(int n) &#123;</div><div class="line">        if (n == 1)</div><div class="line">            return 9;</div><div class="line">        long max = pow(10, n) - 1;</div><div class="line">        long min = pow(10, n - 1);</div><div class="line">        </div><div class="line">        for (long i = max; i &gt;= min; i--) &#123;</div><div class="line">            string tmp = to_string(i);</div><div class="line">            reverse(tmp.begin(), tmp.end());</div><div class="line">            tmp = to_string(i) + tmp;</div><div class="line">            </div><div class="line">            long num = stol(tmp);</div><div class="line">            for (long j = max; pow(j, 2) &gt;= num; j--)</div><div class="line">                if (num % j == 0 )</div><div class="line">                    return num % 1337;</div><div class="line">        &#125;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leecode 143. Reorder List</title>
    <link href="http://yoursite.com/2018/06/07/leetcode143/"/>
    <id>http://yoursite.com/2018/06/07/leetcode143/</id>
    <published>2018-06-06T16:00:00.000Z</published>
    <updated>2018-06-07T13:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Given a singly linked list L: L0→L1→…→Ln-1→Ln,</div><div class="line">reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…</div><div class="line"></div><div class="line">You may not modify the values in the list&apos;s nodes, only nodes itself may be changed.</div><div class="line"></div><div class="line">Example 1:</div><div class="line"></div><div class="line">Given 1-&gt;2-&gt;3-&gt;4, reorder it to 1-&gt;4-&gt;2-&gt;3.</div><div class="line">Example 2:</div><div class="line"></div><div class="line">Given 1-&gt;2-&gt;3-&gt;4-&gt;5, reorder it to 1-&gt;5-&gt;2-&gt;4-&gt;3.</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><ol>
<li>分割list, 使用slow和fast指针</li>
<li>reverse后半段list</li>
<li>在前半段list间隔插入后半段的list</li>
</ol>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    void reorderList(ListNode* head) &#123;</div><div class="line">        if (head == nullptr)</div><div class="line">            return;</div><div class="line">        ListNode* slow = head;</div><div class="line">        ListNode* fast = head;</div><div class="line">        while (slow-&gt;next &amp;&amp; fast-&gt;next &amp;&amp; fast-&gt;next-&gt;next) &#123;</div><div class="line">            slow = slow-&gt;next;</div><div class="line">            fast = fast-&gt;next-&gt;next;</div><div class="line">        &#125;</div><div class="line">        ListNode* tmp = slow-&gt;next; //保存后半段list的头节点</div><div class="line">        slow-&gt;next = nullptr;  //断开list</div><div class="line">        </div><div class="line">        //reverse list</div><div class="line">        ListNode* prev = nullptr; </div><div class="line">        ListNode* node = tmp;</div><div class="line">        ListNode* reverseHead = nullptr;</div><div class="line">        while (node != nullptr) &#123;</div><div class="line">            ListNode* next = node-&gt;next;</div><div class="line">            if (next == nullptr)</div><div class="line">                reverseHead = node;</div><div class="line">            node-&gt;next = prev;</div><div class="line">            prev = node;</div><div class="line">            node = next;</div><div class="line">        &#125;</div><div class="line">        ListNode* p = reverseHead;</div><div class="line">        ListNode* pNode = p;</div><div class="line">        </div><div class="line">        ListNode* oriNode = head;</div><div class="line">        while (pNode != nullptr) &#123;</div><div class="line">            pNode = pNode-&gt;next;</div><div class="line">            p-&gt;next = oriNode-&gt;next;</div><div class="line">            oriNode-&gt;next = p;</div><div class="line">            oriNode = p-&gt;next;</div><div class="line">            p = pNode;</div><div class="line">        &#125;       </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>asm.s中断过程分析</title>
    <link href="http://yoursite.com/2018/06/02/asm/"/>
    <id>http://yoursite.com/2018/06/02/asm/</id>
    <published>2018-06-01T16:00:00.000Z</published>
    <updated>2018-06-13T07:19:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-中断调用没有出错号"><a href="#1-中断调用没有出错号" class="headerlink" title="1. 中断调用没有出错号"></a>1. 中断调用没有出错号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">_divide_error:</div><div class="line">	pushl $_do_divide_error 调用函数地址入栈</div><div class="line">no_error_code:</div><div class="line">	//eax和esp指向的内容互换，即eax原来的值入栈，调用函数的地址放到eax</div><div class="line">	xchgl %eax,(%esp) </div><div class="line">	pushl %ebx</div><div class="line">	pushl %ecx</div><div class="line">	pushl %edx</div><div class="line">	pushl %edi</div><div class="line">	pushl %esi</div><div class="line">	pushl %ebp</div><div class="line">	push %ds</div><div class="line">	push %es</div><div class="line">	push %fs</div><div class="line">	pushl $0		# &quot;error code&quot; //调用函数的第一个参数</div><div class="line">	//将堆栈中原指向eip的指针装入edx, 之后压入栈中</div><div class="line">	lea 44(%esp),%edx </div><div class="line">	pushl %edx  //调用函数的第二个参数</div><div class="line">	//do_divide_err函数：</div><div class="line">	//void do_divide_error(long esp, long error_code)</div><div class="line">	//&#123;</div><div class="line">	//	die(&quot;divide error&quot;,esp,error_code);</div><div class="line">	//&#125;</div><div class="line">	movl $0x10,%edx</div><div class="line">	//设置ds, es, fs的内容： 内核数据段选择符</div><div class="line">	mov %dx,%ds</div><div class="line">	mov %dx,%es</div><div class="line">	mov %dx,%fs</div><div class="line">	call *%eax //调用操作数指定地址处的函数，比如do_divide_error();</div><div class="line">	addl $8,%esp //丢弃前面入栈的2个参数，当前esp重新指向fs</div><div class="line">	pop %fs</div><div class="line">	pop %es</div><div class="line">	pop %ds</div><div class="line">	popl %ebp</div><div class="line">	popl %esi</div><div class="line">	popl %edi</div><div class="line">	popl %edx</div><div class="line">	popl %ecx</div><div class="line">	popl %ebx</div><div class="line">	popl %eax  //弹出交换前eax的内容</div><div class="line">	iret</div></pre></td></tr></table></figure>
<h3 id="2-中断调用有出错号"><a href="#2-中断调用有出错号" class="headerlink" title="2. 中断调用有出错号"></a>2. 中断调用有出错号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">_double_fault:</div><div class="line">	pushl $_do_double_fault</div><div class="line">error_code:</div><div class="line">	xchgl %eax,4(%esp)		# error code &lt;-&gt; %eax</div><div class="line">	xchgl %ebx,(%esp)		# &amp;function &lt;-&gt; %ebx</div><div class="line">	pushl %ecx</div><div class="line">	pushl %edx</div><div class="line">	pushl %edi</div><div class="line">	pushl %esi</div><div class="line">	pushl %ebp</div><div class="line">	push %ds</div><div class="line">	push %es</div><div class="line">	push %fs</div><div class="line">	pushl %eax			# error code</div><div class="line">	lea 44(%esp),%eax		# offset</div><div class="line">	//do_double_deault的具体实现：</div><div class="line">	//void do_double_fault(long esp, long error_code)</div><div class="line">	//&#123;</div><div class="line">	//	die(&quot;double fault&quot;,esp,error_code);</div><div class="line">	//&#125;</div><div class="line">	pushl %eax</div><div class="line">	movl $0x10,%eax </div><div class="line">	mov %ax,%ds</div><div class="line">	mov %ax,%es</div><div class="line">	mov %ax,%fs</div><div class="line">	call *%ebx  这两步与没有出错号的做法相同</div><div class="line">	addl $8,%esp</div><div class="line">	pop %fs</div><div class="line">	pop %es</div><div class="line">	pop %ds</div><div class="line">	popl %ebp</div><div class="line">	popl %esi</div><div class="line">	popl %edi</div><div class="line">	popl %edx</div><div class="line">	popl %ecx</div><div class="line">	popl %ebx</div><div class="line">	popl %eax</div><div class="line">	iret</div></pre></td></tr></table></figure>
<p><img src="http://ous5r4na6.bkt.clouddn.com/asm.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-中断调用没有出错号&quot;&gt;&lt;a href=&quot;#1-中断调用没有出错号&quot; class=&quot;headerlink&quot; title=&quot;1. 中断调用没有出错号&quot;&gt;&lt;/a&gt;1. 中断调用没有出错号&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 22. 括号生成</title>
    <link href="http://yoursite.com/2018/06/01/leetcode22/"/>
    <id>http://yoursite.com/2018/06/01/leetcode22/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-07T13:42:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。</div><div class="line"></div><div class="line">例如，给出 n = 3，生成结果为：</div><div class="line">[</div><div class="line">  &quot;((()))&quot;,</div><div class="line">  &quot;(()())&quot;,</div><div class="line">  &quot;(())()&quot;,</div><div class="line">  &quot;()(())&quot;,</div><div class="line">  &quot;()()()&quot;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>关键的一点，左括号的数目要小于等于右括号，这是生成有效括号组的前提。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;string&gt; generateParenthesis(int n) &#123;</div><div class="line">        vector&lt;string&gt; res;</div><div class="line">        dfs(n, n, &quot;&quot;, res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    void dfs(int left, int right, string out, vector&lt;string&gt;&amp; res) &#123;</div><div class="line">        if (left &lt; 0 || right &lt; 0 || left &gt; right)</div><div class="line">            return;</div><div class="line">        if (left == 0 &amp;&amp; right == 0) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        dfs(left - 1, right, out + &quot;(&quot;, res);</div><div class="line">        dfs(left, right - 1, out + &quot;)&quot;, res);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="dfs, leetcode" scheme="http://yoursite.com/categories/dfs-leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>fork内核源代码分析</title>
    <link href="http://yoursite.com/2018/06/01/fork/"/>
    <id>http://yoursite.com/2018/06/01/fork/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-12T03:46:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-verify-area-kernel-fork-c"><a href="#1-verify-area-kernel-fork-c" class="headerlink" title="1.verify_area(kernel/fork.c)"></a>1.verify_area(kernel/fork.c)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">参数addr为逻辑地址, size为原长度</div><div class="line">void verify_area(void * addr,int size)</div><div class="line">&#123;</div><div class="line">	unsigned long start;</div><div class="line"></div><div class="line">	start = (unsigned long) addr;</div><div class="line">	//start &amp; 0xfff计算原起始位置在其所处的页面的偏移量   </div><div class="line">	//加上原长度size就是调整之后的size，原理如下图</div><div class="line">	size += start &amp; 0xfff;</div><div class="line">	//把start调整到页面边界值</div><div class="line">	start &amp;= 0xfffff000;</div><div class="line">	//加上进程数据段在线性空间中的起始基址，start就是整个线性地址空间中的位置</div><div class="line">	start += get_base(current-&gt;ldt[2]);</div><div class="line">	while (size&gt;0) &#123;</div><div class="line">		size -= 4096;</div><div class="line">		//每次验证一个4k页面的大小</div><div class="line">		write_verify(start);</div><div class="line">		start += 4096;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">write_verify(mm/memory.c)分析：</div><div class="line">void write_verify(unsigned long address)</div><div class="line">&#123;</div><div class="line">	unsigned long page;</div><div class="line">	//目录项号=address&gt;&gt;22, 每个目录项占4字节，页目录表从物理地址0开始   </div><div class="line">	//所以实际的目录项指针=address&gt;&gt;20，&amp;0xffc屏蔽页表项索引的内容    </div><div class="line">	//之后取页目录项的内容，判断页目录项对应的页表是否存在，不存在就返回    </div><div class="line">	if (!( (page = *((unsigned long *) ((address&gt;&gt;20) &amp; 0xffc)) )&amp;1))</div><div class="line">		return;</div><div class="line">	//取页表地址   </div><div class="line">	page &amp;= 0xfffff000;</div><div class="line">	//这里用页表地址+页表项偏移值，取页表项指针</div><div class="line">	page += ((address&gt;&gt;10) &amp; 0xffc);</div><div class="line">	//判断是否满足：页面存在且该页面不可写</div><div class="line">	if ((3 &amp; *(unsigned long *) page) == 1)  /* non-writeable, present */</div><div class="line">		un_wp_page((unsigned long *) page);</div><div class="line">	return;</div><div class="line">&#125;</div><div class="line">un_wp_page(mm/memory.c)分析：</div><div class="line">//参数为页表项指针</div><div class="line">void un_wp_page(unsigned long * table_entry)</div><div class="line">&#123;</div><div class="line">	unsigned long old_page,new_page;</div><div class="line">	//取old_page的页框地址</div><div class="line">	old_page = 0xfffff000 &amp; *table_entry;</div><div class="line">	//页框地址在主存中且该页面被引用次数为1（没有共享）   </div><div class="line">	//如果该内存页面只被一个进程使用并且不是内核中的进程！</div><div class="line">	if (old_page &gt;= LOW_MEM &amp;&amp; mem_map[MAP_NR(old_page)]==1) &#123;</div><div class="line">		//设置可写标志，不需要重新申请新的页面</div><div class="line">		*table_entry |= 2;</div><div class="line">		invalidate();</div><div class="line">		return;</div><div class="line">	&#125;</div><div class="line">	//否则需要申请新的页面，取消页面共享</div><div class="line">	if (!(new_page=get_free_page()))</div><div class="line">		oom();</div><div class="line">	//将原页面的引用次数-1</div><div class="line">	if (old_page &gt;= LOW_MEM)</div><div class="line">		mem_map[MAP_NR(old_page)]--;</div><div class="line">	//将原页面内容写到新的页面上</div><div class="line">	copy_page(old_page,new_page);</div><div class="line">	*table_entry = new_page | 7;</div><div class="line">	invalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ous5r4na6.bkt.clouddn.com/fork1.png" alt=""><br><img src="http://ous5r4na6.bkt.clouddn.com/fork2.png" alt=""></p>
<h3 id="2-copy-mem-kernel-fork-c"><a href="#2-copy-mem-kernel-fork-c" class="headerlink" title="2.copy_mem(kernel/fork.c)"></a>2.copy_mem(kernel/fork.c)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">int copy_mem(int nr,struct task_struct * p)</div><div class="line">&#123;</div><div class="line">	unsigned long old_data_base,new_data_base,data_limit;</div><div class="line">	unsigned long old_code_base,new_code_base,code_limit;</div><div class="line">	//分别取代码段限长和数据段限长</div><div class="line">	code_limit=get_limit(0x0f);</div><div class="line">	data_limit=get_limit(0x17);</div><div class="line">	old_code_base = get_base(current-&gt;ldt[1]);</div><div class="line">	old_data_base = get_base(current-&gt;ldt[2]);</div><div class="line">	//比较代码段和数据段基地址</div><div class="line">	if (old_data_base != old_code_base)</div><div class="line">		panic(&quot;We don&apos;t support separate I&amp;D&quot;);</div><div class="line">	if (data_limit &lt; code_limit)</div><div class="line">		panic(&quot;Bad data_limit&quot;);</div><div class="line">	//设置新进程在线性地址空间中的基地址</div><div class="line">	new_data_base = new_code_base = nr * TASK_SIZE;</div><div class="line">	p-&gt;start_code = new_code_base;</div><div class="line">	set_base(p-&gt;ldt[1],new_code_base);</div><div class="line">	set_base(p-&gt;ldt[2],new_data_base);</div><div class="line">	//复制父进程的页目录表项和页表项</div><div class="line">	if (copy_page_tables(old_data_base,new_data_base,data_limit)) &#123;</div><div class="line">		free_page_tables(new_data_base,data_limit);</div><div class="line">		return -ENOMEM;</div><div class="line">	&#125;</div><div class="line">	return 0;</div><div class="line">&#125;</div><div class="line">copy_page_tables(mm/memory.c)分析:</div><div class="line">int copy_page_tables(unsigned long from,unsigned long to,long size)</div><div class="line">&#123;</div><div class="line">	unsigned long * from_page_table;</div><div class="line">	unsigned long * to_page_table;</div><div class="line">	unsigned long this_page;</div><div class="line">	unsigned long * from_dir, * to_dir;</div><div class="line">	unsigned long new_page;</div><div class="line">	unsigned long nr;</div><div class="line">	//判断起始地址和目的地址是否在4Mb边界</div><div class="line">	if ((from&amp;0x3fffff) || (to&amp;0x3fffff))</div><div class="line">		panic(&quot;copy_page_tables called with wrong alignment&quot;);</div><div class="line">	//取源地址和目的地址起始目录项指针</div><div class="line">	from_dir = (unsigned long *) ((from&gt;&gt;20) &amp; 0xffc); /* _pg_dir = 0 */</div><div class="line">	to_dir = (unsigned long *) ((to&gt;&gt;20) &amp; 0xffc);</div><div class="line">	//计算参数size要占用多少页面的内存空间</div><div class="line">	size = ((unsigned) (size+0x3fffff)) &gt;&gt; 22;</div><div class="line">	for( ; size--&gt;0 ; from_dir++,to_dir++) &#123;</div><div class="line">		//判断目录项指定的页表是否存在</div><div class="line">		if (1 &amp; *to_dir)</div><div class="line">			panic(&quot;copy_page_tables: already exist&quot;);</div><div class="line">		if (!(1 &amp; *from_dir))</div><div class="line">			continue;</div><div class="line">		from_page_table = (unsigned long *) (0xfffff000 &amp; *from_dir);</div><div class="line">		if (!(to_page_table = (unsigned long *) get_free_page()))</div><div class="line">			return -1;	/* Out of memory, see freeing */</div><div class="line">		//设置目的目录项的信息，后三位</div><div class="line">		*to_dir = ((unsigned long) to_page_table) | 7;</div><div class="line">		//如果from是从内核空间开始，只复制160项，否则复制完整的1024项</div><div class="line">		nr = (from==0)?0xA0:1024;</div><div class="line">		for ( ; nr-- &gt; 0 ; from_page_table++,to_page_table++) &#123;</div><div class="line">			//取源页表项内容</div><div class="line">			this_page = *from_page_table;</div><div class="line">			if (!this_page)</div><div class="line">				continue;</div><div class="line">			if (!(1 &amp; this_page)) &#123;</div><div class="line">				if (!(new_page = get_free_page()))</div><div class="line">					return -1;</div><div class="line">				read_swap_page(this_page&gt;&gt;1, (char *) new_page);</div><div class="line">				*to_page_table = this_page;</div><div class="line">				*from_page_table = new_page | (PAGE_DIRTY | 7);</div><div class="line">				continue;</div><div class="line">			&#125;</div><div class="line">			//复位页表R/W标志，只读</div><div class="line">			this_page &amp;= ~2;</div><div class="line">			//用源页表项内容填充目的页表项</div><div class="line">			*to_page_table = this_page;</div><div class="line">			//指向的物理内存地址大于LOW_MEM</div><div class="line">			if (this_page &gt; LOW_MEM) &#123;</div><div class="line">				//把源页表项也设为只读</div><div class="line">				*from_page_table = this_page;</div><div class="line">				this_page -= LOW_MEM;</div><div class="line">				this_page &gt;&gt;= 12;</div><div class="line">				//该页面的引用计数+1</div><div class="line">				mem_map[this_page]++;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	invalidate();</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-copy-process-kernel-fork-c"><a href="#3-copy-process-kernel-fork-c" class="headerlink" title="3.copy_process(kernel/fork.c)"></a>3.copy_process(kernel/fork.c)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">int copy_process(int nr,long ebp,long edi,long esi,long gs,long none,</div><div class="line">		long ebx,long ecx,long edx, long orig_eax,</div><div class="line">		long fs,long es,long ds,</div><div class="line">		long eip,long cs,long eflags,long esp,long ss)</div><div class="line">&#123;</div><div class="line">	struct task_struct *p;</div><div class="line">	int i;</div><div class="line">	struct file *f;</div><div class="line">	//为新任务分配内存</div><div class="line">	p = (struct task_struct *) get_free_page();</div><div class="line">	if (!p)</div><div class="line">		return -EAGAIN;</div><div class="line">	//填充指针数组内容</div><div class="line">	task[nr] = p;</div><div class="line">	//把当前任务结构内容复制到新的任务</div><div class="line">	*p = *current;	/* NOTE! this doesn&apos;t copy the supervisor stack */</div><div class="line">	//新任务设置为不可中断，防止调度</div><div class="line">	p-&gt;state = TASK_UNINTERRUPTIBLE;</div><div class="line">	//新任务的进程号</div><div class="line">	p-&gt;pid = last_pid;</div><div class="line">	p-&gt;counter = p-&gt;priority;</div><div class="line">	p-&gt;signal = 0;</div><div class="line">	p-&gt;alarm = 0;</div><div class="line">	p-&gt;leader = 0;		/* process leadership doesn&apos;t inherit */</div><div class="line">	p-&gt;utime = p-&gt;stime = 0;</div><div class="line">	p-&gt;cutime = p-&gt;cstime = 0;</div><div class="line">	p-&gt;start_time = jiffies;</div><div class="line">	p-&gt;tss.back_link = 0;</div><div class="line">	//内核态栈指针指向页面末端</div><div class="line">	p-&gt;tss.esp0 = PAGE_SIZE + (long) p;</div><div class="line">	//设置内核态栈的段选择符</div><div class="line">	p-&gt;tss.ss0 = 0x10;</div><div class="line">	p-&gt;tss.eip = eip;</div><div class="line">	p-&gt;tss.eflags = eflags;</div><div class="line">	p-&gt;tss.eax = 0;</div><div class="line">	p-&gt;tss.ecx = ecx;</div><div class="line">	p-&gt;tss.edx = edx;</div><div class="line">	p-&gt;tss.ebx = ebx;</div><div class="line">	p-&gt;tss.esp = esp;</div><div class="line">	p-&gt;tss.ebp = ebp;</div><div class="line">	p-&gt;tss.esi = esi;</div><div class="line">	p-&gt;tss.edi = edi;</div><div class="line">	p-&gt;tss.es = es &amp; 0xffff;</div><div class="line">	p-&gt;tss.cs = cs &amp; 0xffff;</div><div class="line">	p-&gt;tss.ss = ss &amp; 0xffff;</div><div class="line">	p-&gt;tss.ds = ds &amp; 0xffff;</div><div class="line">	p-&gt;tss.fs = fs &amp; 0xffff;</div><div class="line">	p-&gt;tss.gs = gs &amp; 0xffff;</div><div class="line">	//把GDT中本任务LDT段描述符的选择符保存在本任务的TSS段中</div><div class="line">	p-&gt;tss.ldt = _LDT(nr);</div><div class="line">	p-&gt;tss.trace_bitmap = 0x80000000;</div><div class="line">	if (last_task_used_math == current)</div><div class="line">		__asm__(&quot;clts ; fnsave %0 ; frstor %0&quot;::&quot;m&quot; (p-&gt;tss.i387));</div><div class="line">	//复制进程页表</div><div class="line">	if (copy_mem(nr,p)) &#123;</div><div class="line">		task[nr] = NULL;</div><div class="line">		free_page((long) p);</div><div class="line">		return -EAGAIN;</div><div class="line">	&#125;</div><div class="line">	//如果父进程中有文件是打开的，那么对应打开文件的引用计数+1，因为新进程将与父进程共享这些文件</div><div class="line">	for (i=0; i&lt;NR_OPEN;i++)</div><div class="line">		if (f=p-&gt;filp[i])</div><div class="line">			f-&gt;f_count++;</div><div class="line">	if (current-&gt;pwd)</div><div class="line">		current-&gt;pwd-&gt;i_count++;</div><div class="line">	if (current-&gt;root)</div><div class="line">		current-&gt;root-&gt;i_count++;</div><div class="line">	if (current-&gt;executable)</div><div class="line">		current-&gt;executable-&gt;i_count++;</div><div class="line">	if (current-&gt;library)</div><div class="line">		current-&gt;library-&gt;i_count++;</div><div class="line">	//源码中有一处注释：</div><div class="line">	//Entry into gdt where to find first TSS.    </div><div class="line">	//0-nul, 1-cs, 2-ds, 3-syscall 4-TSS0, 5-LDT0, 6-TSS1 etc ... </div><div class="line">	set_tss_desc(gdt+(nr&lt;&lt;1)+FIRST_TSS_ENTRY,&amp;(p-&gt;tss));</div><div class="line">	set_ldt_desc(gdt+(nr&lt;&lt;1)+FIRST_LDT_ENTRY,&amp;(p-&gt;ldt));</div><div class="line">	p-&gt;p_pptr = current;</div><div class="line">	p-&gt;p_cptr = 0;</div><div class="line">	p-&gt;p_ysptr = 0;</div><div class="line">	p-&gt;p_osptr = current-&gt;p_cptr;</div><div class="line">	if (p-&gt;p_osptr)</div><div class="line">		p-&gt;p_osptr-&gt;p_ysptr = p;</div><div class="line">	current-&gt;p_cptr = p;</div><div class="line">	p-&gt;state = TASK_RUNNING;	/* do this last, just in case */</div><div class="line">	return last_pid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-verify-area-kernel-fork-c&quot;&gt;&lt;a href=&quot;#1-verify-area-kernel-fork-c&quot; class=&quot;headerlink&quot; title=&quot;1.verify_area(kernel/fork.c)&quot;&gt;&lt;/a&gt;1.ve
    
    </summary>
    
      <category term="fork" scheme="http://yoursite.com/categories/fork/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 39. 组合总和</title>
    <link href="http://yoursite.com/2018/05/31/leetcode39/"/>
    <id>http://yoursite.com/2018/05/31/leetcode39/</id>
    <published>2018-05-30T16:00:00.000Z</published>
    <updated>2018-06-07T13:42:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</div><div class="line"></div><div class="line">candidates 中的数字可以无限制重复被选取。</div><div class="line"></div><div class="line">说明：</div><div class="line"></div><div class="line">所有数字（包括 target）都是正整数。</div><div class="line">解集不能包含重复的组合。 </div><div class="line">示例 1:</div><div class="line"></div><div class="line">输入: candidates = [2,3,6,7], target = 7,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [7],</div><div class="line">  [2,2,3]</div><div class="line">]</div><div class="line">示例 2:</div><div class="line"></div><div class="line">输入: candidates = [2,3,5], target = 8,</div><div class="line">所求解集为:</div><div class="line">[</div><div class="line">  [2,2,2,2],</div><div class="line">  [2,3,3],</div><div class="line">  [3,5]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>dfs, 与<a href="http://jackniulin.com/2018/05/30/leetcode131/" target="_blank" rel="external">131. 分割回文串</a>大体做法相同   </p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        sort(candidates.begin(), candidates.end());</div><div class="line">        vector&lt;int&gt; out;</div><div class="line">        helper(candidates, out, 0, 0, target, res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    void helper(vector&lt;int&gt;&amp; candidates, vector&lt;int&gt;&amp; out, int start, int val, int target, vector&lt;vector&lt;int&gt;&gt;&amp; res) &#123;</div><div class="line">        if (val &gt; target)</div><div class="line">            return;</div><div class="line">        if (val == target) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = start; i &lt; candidates.size(); i++) &#123;</div><div class="line">            out.push_back(candidates[i]);</div><div class="line">            val += candidates[i];</div><div class="line">            helper(candidates, out, i, val, target, res);</div><div class="line">            out.pop_back();</div><div class="line">            val -= candidates[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="dfs, leetcode" scheme="http://yoursite.com/categories/dfs-leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 131. 分割回文串</title>
    <link href="http://yoursite.com/2018/05/30/leetcode131/"/>
    <id>http://yoursite.com/2018/05/30/leetcode131/</id>
    <published>2018-05-29T16:00:00.000Z</published>
    <updated>2018-06-07T13:41:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</div><div class="line"></div><div class="line">返回 s 所有可能的分割方案。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">输入: &quot;aab&quot;</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>dfs一个函数，另外需要一个判断子串是否是回文串。难点在于dfs函数for循环参数的设置。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3.代码"></a>3.代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;string&gt;&gt; partition(string s) &#123;</div><div class="line">        vector&lt;vector&lt;string&gt;&gt; res;</div><div class="line">        vector&lt;string&gt; out;</div><div class="line">        dfs(s, out, 0, res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void dfs(string s, vector&lt;string&gt;&amp; out, int start, vector&lt;vector&lt;string&gt;&gt;&amp; res) &#123;</div><div class="line">        if (start == s.size()) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = start; i &lt; s.size(); i++) &#123;</div><div class="line">            if (judge(s, start, i)) &#123;</div><div class="line">                out.push_back(s.substr(start, i - start + 1));</div><div class="line">                dfs(s, out, i + 1, res);</div><div class="line">                out.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    bool judge(string s, int start, int end) &#123;</div><div class="line">        while (start &lt; end) &#123;</div><div class="line">            if (s[start] != s[end])</div><div class="line">                return false;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 77. 组合</title>
    <link href="http://yoursite.com/2018/05/27/leetcode77/"/>
    <id>http://yoursite.com/2018/05/27/leetcode77/</id>
    <published>2018-05-26T16:00:00.000Z</published>
    <updated>2018-06-07T13:46:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">输入: n = 4, k = 2</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [2,4],</div><div class="line">  [3,4],</div><div class="line">  [2,3],</div><div class="line">  [1,2],</div><div class="line">  [1,3],</div><div class="line">  [1,4],</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>dfs的又一个经典题目</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) &#123;</div><div class="line">        vector&lt;vector&lt;int&gt;&gt; res;</div><div class="line">        vector&lt;int&gt; out;</div><div class="line">        dfs(n, k, 1, 0, out, res);</div><div class="line">        return res;       </div><div class="line">    &#125;</div><div class="line">    void dfs(int n, int k, int start, int count, vector&lt;int&gt;&amp; out, vector&lt;vector&lt;int&gt;&gt;&amp; res) &#123;</div><div class="line">        if (count == k) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = start; i &lt;= n; i++) &#123;</div><div class="line">            out.push_back(i);</div><div class="line">            dfs(n, k, i + 1, ++count, out, res);</div><div class="line">            out.pop_back();</div><div class="line">            count--;</div><div class="line">        &#125;      </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="dfs, leetcode" scheme="http://yoursite.com/categories/dfs-leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 0.12内核中signal的实现</title>
    <link href="http://yoursite.com/2018/05/25/signal1/"/>
    <id>http://yoursite.com/2018/05/25/signal1/</id>
    <published>2018-05-24T16:00:00.000Z</published>
    <updated>2018-05-30T08:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-sys-signal"><a href="#1-sys-signal" class="headerlink" title="1.sys_signal"></a>1.sys_signal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">int sys_signal(int signum, long handler, long restorer)</div><div class="line">&#123;</div><div class="line">	struct sigaction tmp;</div><div class="line">	//SIGKILL和SIGSTOP不能被进程捕获</div><div class="line">	if (signum&lt;1 || signum&gt;32 || signum==SIGKILL || signum==SIGSTOP)</div><div class="line">		return -EINVAL;</div><div class="line">	tmp.sa_handler = (void (*)(int)) handler; //设置信号处理句柄</div><div class="line">	tmp.sa_mask = 0; </div><div class="line">	//该信号处理句柄只使用一次就恢复到默认值</div><div class="line">	tmp.sa_flags = SA_ONESHOT | SA_NOMASK; </div><div class="line">	tmp.sa_restorer = (void (*)(void)) restorer;</div><div class="line">	//取该信号原来的处理句柄，安装新句柄，返回旧句柄</div><div class="line">	handler = (long) current-&gt;sigaction[signum-1].sa_handler;</div><div class="line">	current-&gt;sigaction[signum-1] = tmp;</div><div class="line">	return handler;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-sys-sigaction"><a href="#2-sys-sigaction" class="headerlink" title="2.sys_sigaction"></a>2.sys_sigaction</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int sys_sigaction(int signum, const struct sigaction * action,</div><div class="line">	struct sigaction * oldaction)</div><div class="line">&#123;</div><div class="line">	struct sigaction tmp;</div><div class="line"></div><div class="line">	if (signum&lt;1 || signum&gt;32 || signum==SIGKILL || signum==SIGSTOP)</div><div class="line">		return -EINVAL;</div><div class="line">	//取原sigaction</div><div class="line">	tmp = current-&gt;sigaction[signum-1];</div><div class="line">	//利用参数action设置新的sigaction</div><div class="line">	get_new((char *) action,</div><div class="line">		(char *) (signum-1+current-&gt;sigaction));</div><div class="line">	//若oldaction非空，利用前面保存的tmp填装oldaction</div><div class="line">	if (oldaction)</div><div class="line">		save_old((char *) &amp;tmp,(char *) oldaction);</div><div class="line">	//如果允许信号在自己的句柄中收到，设置sa_mak为0， 否则屏蔽这个信号</div><div class="line">	if (current-&gt;sigaction[signum-1].sa_flags &amp; SA_NOMASK)</div><div class="line">		current-&gt;sigaction[signum-1].sa_mask = 0;</div><div class="line">	else</div><div class="line">		current-&gt;sigaction[signum-1].sa_mask |= (1&lt;&lt;(signum-1));</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-do-signal函数修改用户栈的过程："><a href="#3-do-signal函数修改用户栈的过程：" class="headerlink" title="3.do_signal函数修改用户栈的过程："></a>3.do_signal函数修改用户栈的过程：</h2><p><img src="http://ous5r4na6.bkt.clouddn.com/43D00015-AC14-45DD-B1C7-1B6067B59DF1.png" alt="">  </p>
<pre><code>int do_signal(long signr,long eax,long ebx, long ecx, long edx, long orig_eax,
    long fs, long es, long ds,
    long eip, long cs, long eflags,
    unsigned long * esp, long ss)
{
    unsigned long sa_handler;
    long old_eip=eip;  //eip为原本要执行的代码
    struct sigaction * sa = current-&gt;sigaction + signr - 1;
    int longs;

    unsigned long * tmp_esp;

#ifdef notdef
    printk(&quot;pid: %d, signr: %x, eax=%d, oeax = %d, int=%d\n&quot;,
        current-&gt;pid, signr, eax, orig_eax,
        sa-&gt;sa_flags &amp; SA_INTERRUPT);
#endif
    if ((orig_eax != -1) &amp;&amp;
        ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
        if ((eax == -ERESTARTSYS) &amp;&amp; ((sa-&gt;sa_flags &amp; SA_INTERRUPT) ||
            signr &lt; SIGCONT || signr &gt; SIGTTOU))
            *(&amp;eax) = -EINTR;
        else {
            *(&amp;eax) = orig_eax;
            *(&amp;eip) = old_eip -= 2;
        }
    }
    sa_handler = (unsigned long) sa-&gt;sa_handler;
    if (sa_handler==1)  //默认忽略句柄SIG_IGN,不作任何处理
        return(1);   /* Ignore, see if there are more signals... */
    if (!sa_handler) {
        switch (signr) {
        case SIGCONT:
        case SIGCHLD:
            return(1);  /* Ignore, ... */

        case SIGSTOP:
        case SIGTSTP:
        case SIGTTIN:
        case SIGTTOU:
            current-&gt;state = TASK_STOPPED;
            current-&gt;exit_code = signr;
            if (!(current-&gt;p_pptr-&gt;sigaction[SIGCHLD-1].sa_flags &amp;
                    SA_NOCLDSTOP))
                current-&gt;p_pptr-&gt;signal |= (1&lt;&lt;(SIGCHLD-1));
            return(1);  /* Reschedule another event */

        case SIGQUIT:
        case SIGILL:
        case SIGTRAP:
        case SIGIOT:
        case SIGFPE:
        case SIGSEGV:
            if (core_dump(signr))
                do_exit(signr|0x80);
            /* fall through */
        default:
            do_exit(signr);  //可作为wait()或wait_pid()函数的状态信息，取得进程的退出状态码或子进程终止的原因
        }
    }
    /*
     * OK, we&apos;re invoking a handler
     */
    if (sa-&gt;sa_flags &amp; SA_ONESHOT)
        sa-&gt;sa_handler = NULL; //该句柄只执行一次
    *(&amp;eip) = sa_handler; //eip指向信号处理程序
    longs = (sa-&gt;sa_flags &amp; SA_NOMASK)?7:8;
    *(&amp;esp) -= longs;
    verify_area(esp,longs*4);
    tmp_esp=esp;
    put_fs_long((long) sa-&gt;sa_restorer,tmp_esp++);
    put_fs_long(signr,tmp_esp++);
    if (!(sa-&gt;sa_flags &amp; SA_NOMASK))
        put_fs_long(current-&gt;blocked,tmp_esp++);
    put_fs_long(eax,tmp_esp++);
    put_fs_long(ecx,tmp_esp++);
    put_fs_long(edx,tmp_esp++);
    put_fs_long(eflags,tmp_esp++);
    put_fs_long(old_eip,tmp_esp++);
    current-&gt;blocked |= sa-&gt;sa_mask;
    return(0);        /* Continue, execute handler */
}
</code></pre><p>do_signal()执行完后，system_call.s将会把内核态堆栈上eip以下的所有值弹出。<br>在执行iret之后，内核态堆栈上的cs:eip，eflags, ss:esp被弹出，恢复到用户态中执行<br>而eip已经指向了信号处理程序，因此会立即执行用户自定义信号处理程序。<br>在该信号处理程序执行完后，通过ret指令，cpu把控制权交给sa_restorer所指向的恢复程序，sa_restorer会清理用户态堆栈，弹出信息，一直弹到old_eip，最后通过sa_restorer的ret弹出old_eip并跳转到其指向的代码中运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-sys-signal&quot;&gt;&lt;a href=&quot;#1-sys-signal&quot; class=&quot;headerlink&quot; title=&quot;1.sys_signal&quot;&gt;&lt;/a&gt;1.sys_signal&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="kernel 0.12" scheme="http://yoursite.com/categories/kernel-0-12/"/>
    
    
  </entry>
  
  <entry>
    <title>quicksort的C++实现</title>
    <link href="http://yoursite.com/2018/05/21/quicksort/"/>
    <id>http://yoursite.com/2018/05/21/quicksort/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2018-07-17T09:10:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-关于快速排序"><a href="#1-关于快速排序" class="headerlink" title="1. 关于快速排序"></a>1. 关于快速排序</h2><p>我的理解: 快速排序是一种稳定的，相对高效的排序算法。每做一次排序实际上是选取一个基准点，从右边开始找小于基准点的数，找到之后再从左边开始找大于基准点的数。待本次排序完成之后，基准点左边的数都不大于它，基准点右边的数都不小于它。</p>
<h2 id="2-C-实现"><a href="#2-C-实现" class="headerlink" title="2. C++实现"></a>2. C++实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;algorithm&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void quicksort(int array[10], int left, int right) &#123;</div><div class="line">	if (left &gt; right)</div><div class="line">		return;</div><div class="line">	int temp = array[left];</div><div class="line">	int i = left, j = right;</div><div class="line">	while (i &lt; j) &#123;</div><div class="line">		while (array[j] &gt;= temp &amp;&amp; i &lt; j) //从右边开始找小于temp的数</div><div class="line">			j--;</div><div class="line">		while (array[i] &lt;= temp &amp;&amp; i &lt; j) //从左边开始找大于temp的数</div><div class="line">			i++;</div><div class="line">		if (i &lt; j) //i &lt; j时才交换</div><div class="line">			swap(array[i], array[j]);</div><div class="line">	&#125;</div><div class="line">	//一次排序过程结束，交换array[i]和基准点的数</div><div class="line">	array[left] = array[i]; </div><div class="line">	array[i] = temp;</div><div class="line">	//处理左右两边的序列</div><div class="line">	quicksort(array, left, i - 1);</div><div class="line">	quicksort(array, i + 1, right);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main() &#123;</div><div class="line">	int array[10] = &#123;6, 3, 5, 1, 10, 2, 4, 9, 7, 8&#125;;</div><div class="line">	cout &lt;&lt; array[0] &lt;&lt; endl;</div><div class="line">	quicksort(array, 0, 9);</div><div class="line">	for (int i = 0; i &lt; 10; i++)</div><div class="line">		cout &lt;&lt; array[i] &lt;&lt; endl;</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-关于快速排序&quot;&gt;&lt;a href=&quot;#1-关于快速排序&quot; class=&quot;headerlink&quot; title=&quot;1. 关于快速排序&quot;&gt;&lt;/a&gt;1. 关于快速排序&lt;/h2&gt;&lt;p&gt;我的理解: 快速排序是一种稳定的，相对高效的排序算法。每做一次排序实际上是选取一个基准点
    
    </summary>
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
  </entry>
  
  <entry>
    <title>信号</title>
    <link href="http://yoursite.com/2018/05/20/signal/"/>
    <id>http://yoursite.com/2018/05/20/signal/</id>
    <published>2018-05-19T16:00:00.000Z</published>
    <updated>2018-05-30T08:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>信号是一种软中断，它提供了一种异步事件处理的方法<br>信号出现时，内核的处理方式有三种：<br>1.忽略信号<br>2.捕捉信号<br>3.执行系统默认动作     </p>
<h2 id="2-函数signal"><a href="#2-函数signal" class="headerlink" title="2. 函数signal"></a>2. 函数signal</h2><blockquote>
<p>void (*signal (int signo, void ( *func )(int))) (int);<br>参数说明：signo是信号名， func为常量SIG_IGN, SIG_DFL, 或者处理该信号的函数地址</p>
</blockquote>
<p>signal函数实例:     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">int main(void) &#123;</div><div class="line">	if (signal(SIGUSR1, sig_usr) == SIG_ERR)</div><div class="line">		err_sys(&quot;can&apos;t catch SIGUSR1&quot;);</div><div class="line">	if (signal(SIGUSR2, sig_usr) == SIG_ERR)</div><div class="line">		err_sys(&quot;can&apos;t catch SIGUSR1&quot;);</div><div class="line">	for ( ; ; )</div><div class="line">		pause();     </div><div class="line">&#125;</div><div class="line">static void sig_usr(int signo) &#123;</div><div class="line">	if (signo == SIGUSR1)</div><div class="line">		printf(&quot;received SIGUSR1\n&quot;);</div><div class="line"></div><div class="line">	else if (signo == SIGUSR2)</div><div class="line">		printf(&quot;received SIGUSR2\n&quot;);</div><div class="line">	else</div><div class="line">		err_dump(&quot;received signal %d\n&quot;, signo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# kill -SIGUSR1 13082<br>received SIGUSR1<br>[root@centos apue]# kill -SIGUSR2 13082<br>received SIGUSR2<br>[root@centos apue]# kill  13082<br>SIGTERM默认的处理动作为终止！   </p>
</blockquote>
<h2 id="3-函数sigaction"><a href="#3-函数sigaction" class="headerlink" title="3.函数sigaction"></a>3.函数sigaction</h2><blockquote>
<p>int sigaction(int signo, const struct sigaction *restrict act, struct sigaction *restrict oact);<br>参数说明：signo为信号编号， 若act非空，修改其动作。若oact非空，借助oact指针返回该信号的上一个动作   </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct sigaction &#123;</div><div class="line">	void (*sa_handler)(int);</div><div class="line">	sigset_t sa_mask;</div><div class="line">	int sa_flags;</div><div class="line">	void (*sa_restorer)(void);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>sa_mask是一个信号集，在调用信号捕捉函数之前，要将该信号集加到进程的信号屏蔽字中，仅当从捕捉函数返回之时再恢复进程之前的信号屏蔽字</p>
</blockquote>
<p>用sigaction实现signal函数      </p>
<pre><code>Sigfunc* signal(int signo, Sigfunc* func) {    
    struct sigaction act, oact;    
    act.sa_handler = func;    
    sigemptyset(&amp;act.sa_mask); //初始化，清除指定信号集中的所有信号,也就是响应所有信号
    act.sa_flags = 0;
    if (signo == SIGALARM) {
#ifdef SA_INTERRUPT
        act.sa_flags |= SA_INTERRUPT; //由此信号中断的系统调用不自动重启
#endif      
    } else {
        act.sa_flags |= SA_RESTART;   //由此信号中断的系统调用自动重启
    }
    if (sigaction(signo, &amp;act, &amp;ocat) &lt; 0)
        return SIG_ERR;
    return oact.sa_handler;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h2&gt;&lt;p&gt;信号是一种软中断，它提供了一种异步事件处理的方法&lt;br&gt;信号出现时，内核的处理方式有三种：&lt;br&gt;1.忽略信号&lt;br&gt;2
    
    </summary>
    
      <category term="apue, signal" scheme="http://yoursite.com/categories/apue-signal/"/>
    
    
  </entry>
  
  <entry>
    <title>Leecode204. Count Primes</title>
    <link href="http://yoursite.com/2018/05/16/leetcode204/"/>
    <id>http://yoursite.com/2018/05/16/leetcode204/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-06-08T14:53:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">统计所有小于非负整数 n 的质数的数量。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">输入: 10</div><div class="line">输出: 4</div><div class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>统计小于n的质数，不包括n. 1不是质数，vec[0] = false. 从2（index = 1）开始，标记它的倍数，记为false. 要注意最外边for循环里变量的设置。最后剩下的都是质数。</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int countPrimes(int n) &#123;</div><div class="line">        int res = 0;</div><div class="line">        vector&lt;bool&gt; vec(n - 1, true);</div><div class="line">        vec[0] = false;</div><div class="line">        int range = sqrt(n);</div><div class="line">        for (int i = 2; i &lt;= range; i++) &#123;</div><div class="line">            if (vec[i - 1]) &#123;</div><div class="line">                for (int j = pow(i, 2); j &lt; n; j += i)</div><div class="line">                    vec[j - 1] = false;  </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i = 0; i &lt; n - 1; i++)</div><div class="line">            if (vec[i])</div><div class="line">                res++;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 338. Bit位计数</title>
    <link href="http://yoursite.com/2018/05/02/leetcode338/"/>
    <id>http://yoursite.com/2018/05/02/leetcode338/</id>
    <published>2018-05-01T16:00:00.000Z</published>
    <updated>2018-06-07T13:42:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><blockquote>
<p>给定一个非负整数 num。 对于范围 0 ≤ i ≤ num 中的每个数字 i ，计算其二进制数中的1的数目并将它们作为数组返回。</p>
<p>示例：<br>比如给定 num = 5 ，应该返回 [0,1,1,2,1,2].</p>
<p>进阶：<br>给出时间复杂度为O(n * sizeof(integer)) 的解答非常容易。 但是你可以在线性时间O(n)内用一次遍历做到吗？<br>要求算法的空间复杂度为O(n)。<br>你能进一步完善解法吗？ 在c ++或任何其他语言中不使用任何内置函数（如c++里的 __builtin_popcount）来执行此操作。  </p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>参考论坛大神的代码，从1开始，偶数二进制形式所含1的个数与该数除以2后的结果所含1的个数相同，奇数的结果为：该数除以2后的所含1的个数结果加1   </p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; countBits(int num) &#123;</div><div class="line">        vector&lt;int&gt; res(1, 0);</div><div class="line">        for (int i = 1; i &lt;= num; i++) &#123;</div><div class="line">            if (i % 2 == 0)</div><div class="line">                res.push_back(res[i / 2]);</div><div class="line">            else</div><div class="line">                res.push_back(res[i / 2] + 1);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个非负整数 num。 对于范围 0 ≤ i ≤ num 中的每个数字 i
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 814. 二叉树剪枝</title>
    <link href="http://yoursite.com/2018/04/23/leetcode814/"/>
    <id>http://yoursite.com/2018/04/23/leetcode814/</id>
    <published>2018-04-22T16:00:00.000Z</published>
    <updated>2018-06-07T13:43:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><blockquote>
<p>给定二叉树根结点 root ，此外树的每个结点的值要么是 0，要么是 1。</p>
<p>返回移除了所有不包含 1 的子树的原二叉树。</p>
<p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)  </p>
<p>示例1:<br>输入: [1,null,0,0,1]<br>输出: [1,null,0,null,1]    </p>
<p>示例2:<br>输入: [1,0,1,0,0,0,1]<br>输出: [1,null,1,null,1]   </p>
<p>示例3:<br>输入: [1,1,0,1,1,0,1,0]<br>输出: [1,1,0,1,1,null,1]</p>
<p>说明:<br>给定的二叉树最多有 100 个节点。<br>每个节点的值只会为 0 或 1 。</p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a>2. 思路</h2><p>后序遍历，判断是否满足剪枝的三个条件</p>
<h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    TreeNode* pruneTree(TreeNode* root) &#123;</div><div class="line">        if (root == nullptr)</div><div class="line">            return nullptr;</div><div class="line">        root-&gt;left = pruneTree(root-&gt;left);</div><div class="line">        root-&gt;right = pruneTree(root-&gt;right);</div><div class="line">        if (root-&gt;val == 0 &amp;&amp; root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr)</div><div class="line">            return nullptr;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定二叉树根结点 root ，此外树的每个结点的值要么是 0，要么是 1。&lt;/
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="后序遍历" scheme="http://yoursite.com/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>线程同步</title>
    <link href="http://yoursite.com/2018/04/19/pthread2/"/>
    <id>http://yoursite.com/2018/04/19/pthread2/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2018-06-10T14:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-互斥量"><a href="#1-互斥量" class="headerlink" title="1. 互斥量"></a>1. 互斥量</h2><p>pthread的互斥接口保护数据，确保同一时间只有一个线程访问数据。从本质上说，互斥量是一把锁。对互斥量加锁以后，任何其它试图再次对互斥量加锁的线程都会被阻塞，知道当前线程释放该互斥锁。如果释放互斥量时有一个以上的线程阻塞，那么所有该锁上的线程都会变成可运行状态。pthread_mutex_t表示互斥量。</p>
<blockquote>
<p>int pthread_mutex_init(pthread_mutex_t * restrict mutex, const pthread_mutexattr_t * restrict attr);   attr为NULL，使用默认的互斥量。<br>int pthread_mutex_destroy(pthread_mutex_t * mutex);</p>
</blockquote>
<p>加锁： pthread_mutex_lock</p>
<blockquote>
<p>int pthread_mutex_lock(pthread_mutex_t <em> mutex);<br>int pthread_mutex_unlock(pthread_mutex_t </em> mutex);</p>
</blockquote>
<p>一个互斥量实例：   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">struct foo &#123;</div><div class="line">	int f_count;</div><div class="line">	pthread_mutex_t f_lock;</div><div class="line">   int f_id;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct foo* foo_alloc(int id) &#123;</div><div class="line">	struct foo* fp;</div><div class="line">	if ((fp = malloc(sizeof(foo))) != NULL) &#123;</div><div class="line">		fp-&gt;f_count = 1;</div><div class="line">		fp-&gt;f_id = id;</div><div class="line">		if (pthread_mutex_init(&amp;fp-&gt;f_lock, NULL) != 0) &#123;</div><div class="line">			free(fp);</div><div class="line">			return NULL;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	return fp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void foo_hold(struct foo* fp) &#123;</div><div class="line">	pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="line">	fp-&gt;f_count++;</div><div class="line">	pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void foo_release(struct foo* fp) &#123;</div><div class="line">	pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="line">	if (--(fp-&gt;f_count) == 0) &#123;</div><div class="line">		pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">		pthread_mutex_destroy(&amp;fp-&gt;f_lock);</div><div class="line">		free(fp);</div><div class="line">	&#125; else &#123;</div><div class="line">		pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-避免死锁"><a href="#2-避免死锁" class="headerlink" title="2. 避免死锁"></a>2. 避免死锁</h2><p>两个互斥量实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;pthread.h&gt;</div><div class="line"></div><div class="line">#define NHASH 30</div><div class="line">#define HASH(id) ((unsigned long)id % NHASH)</div><div class="line"></div><div class="line">pthread_mutex_t hashlock = PTHREAD_MUTEX_INITIALIZER;</div><div class="line"></div><div class="line">struct foo *fh[NHASH];</div><div class="line"></div><div class="line">struct foo &#123;</div><div class="line">	int f_count;</div><div class="line">	pthread_mutex_t f_lock;</div><div class="line">	int f_id;</div><div class="line">	struct foo* next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct foo* alloc(int id) &#123;</div><div class="line">	struct foo* fp;</div><div class="line">	int idx;</div><div class="line">	if ((fp = malloc(sizeof(struct foo))) != NULL) &#123;</div><div class="line">		fp-&gt;f_count = 1;</div><div class="line">		fp-&gt;f_id = id;</div><div class="line">		if (pthread_mutex_init(&amp;fp-&gt;f_lock, NULL) != 0) &#123;</div><div class="line">			free(fp);</div><div class="line">			return NULL;</div><div class="line">		&#125;</div><div class="line">		idx = HASH(id);</div><div class="line">		pthread_mutex_lock(&amp;hashlock);</div><div class="line">		fp-&gt;f_next = fh[idx];</div><div class="line">		pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="line">		pthread_mutex_unlock(&amp;hashlock);</div><div class="line">		/*...*/</div><div class="line">		pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">	&#125;</div><div class="line">	return fp;</div><div class="line">&#125;</div><div class="line">void foo_hold(struct foo* fp) &#123;</div><div class="line">	pthread_mutex_lock(fp-&gt;f_lock);</div><div class="line">	fp-&gt;f_count++;</div><div class="line">	pthread_mutex_unlock(fp-&gt;f_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct foo* foo_find(int id) &#123;</div><div class="line">	struct foo* fp;</div><div class="line">	pthread_mutex_lock(&amp;hashlock);</div><div class="line">	for (fp = fh[HASH[id]]; fp != NULL; fp = fp-&gt;next) &#123;</div><div class="line">		if (fp-&gt;f_id == id) &#123;</div><div class="line">			foo_hold(fp);</div><div class="line">			break;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	pthread_mutex_unlock(&amp;hashlock);</div><div class="line">	return fp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void foo_release(struct foo* fp) &#123;</div><div class="line">	struct foo* tfp;</div><div class="line">	int idx;</div><div class="line">	pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="line">	if (fp-&gt;f_count == 1) &#123;</div><div class="line">		pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">		pthread_mutex_lock(&amp;hahlock);</div><div class="line">		pthread_mutex_lock(&amp;fp-&gt;f_lock);</div><div class="line">		if (fp-&gt;f_count != 1) &#123;</div><div class="line">			fp-&gt;f_count -= 1;</div><div class="line">			pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">			pthread_mutex_unlock(&amp;hashlock);</div><div class="line">			return;</div><div class="line">		&#125;</div><div class="line">		//哈希桶</div><div class="line">		idx = HASH(fp-&gt;f_id);</div><div class="line">		tfp = fh[idx];</div><div class="line">		if (tfp == fp) &#123;</div><div class="line">			fh[idx] = fp-&gt;f_next;</div><div class="line">		&#125; else &#123;</div><div class="line">			while (tfp-&gt;f_next != fp)</div><div class="line">				tfp = tfp-&gt;f_next;</div><div class="line">			tfp-&gt;f_next = fp-&gt;f_next;</div><div class="line">		&#125;</div><div class="line">		pthread_mutex_unlock(&amp;hashlock);</div><div class="line">		pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">		pthread_mutex_destroy(&amp;fp-&gt;f_lock);</div><div class="line">		free(fp);</div><div class="line">	&#125; else &#123;</div><div class="line">		fp-&gt;f_count--;</div><div class="line">		pthread_mutex_unlock(fp-&gt;f_lock);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//另外一种写法</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;pthread.h&gt;</div><div class="line"></div><div class="line">#define NHASH 30</div><div class="line">#define HASH(id) ((unsigned long)id % NHASH)</div><div class="line"></div><div class="line">pthread_mutex_t hashlock = PTHREAD_MUTEX_INITIALIZER;</div><div class="line"></div><div class="line">struct foo *fh[NHASH];</div><div class="line"></div><div class="line">struct foo &#123;</div><div class="line">	int f_count;</div><div class="line">	pthread_mutex_t f_lock;</div><div class="line">	int f_id;</div><div class="line">	struct foo* next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct foo* alloc(int id) &#123;</div><div class="line">	struct foo* fp;</div><div class="line">	int idx;</div><div class="line">	if ((fp = malloc(sizeof(foo))) != NULL) &#123;</div><div class="line">		fp-&gt;f_count = 1;</div><div class="line">		fp-&gt;f_id = id;</div><div class="line">		if (pthread_mutex_init(&amp;fp-&gt;f_lock, NULL) != NULL) &#123;</div><div class="line">			free(fp);</div><div class="line">			return NULL;</div><div class="line">		&#125;</div><div class="line">		idx = HASH(id);</div><div class="line">		pthread_mutex_lock(&amp;hashlock);</div><div class="line">		fp-&gt;f_next = fh[idx];</div><div class="line">		fh[idx] = fp;</div><div class="line">		pthread_mutex_lcok(&amp;fp-&gt;f_lock);</div><div class="line">		pthread_mutex_unlock(&amp;hashlock);</div><div class="line">		/*...*/</div><div class="line">		pthread_mutex_unlock(&amp;fp-&gt;f_lock);</div><div class="line">	&#125;</div><div class="line">	return fp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void foo_hold(struct foo* fp) &#123;</div><div class="line">	pthread_mutex_lock(&amp;hashlock);</div><div class="line">	fp-&gt;f_count++;</div><div class="line">	pthread_mutex_unlock(&amp;hashlock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct foo* find(int id) &#123;</div><div class="line">	struct foo* fp;</div><div class="line">	pthread_mutex_lock(&amp;hashlock);</div><div class="line">	for (fp = fh[HASH(id)]; fp != NULL; fp = fp-&gt;next) &#123;</div><div class="line">		if (fp-&gt;f_id == id) &#123;</div><div class="line">			fp-&gt;f_count++;</div><div class="line">			break;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	pthread_mutex_unlock(&amp;hashlock);</div><div class="line">	return fp;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void release(struct foo* fp) &#123;</div><div class="line">	struct foo* fp;</div><div class="line">	int idx;</div><div class="line">	pthread_mutex_lock(&amp;hashlock);</div><div class="line">	if (--fp-&gt;f_count == 0) &#123;</div><div class="line">		idx = HASH(fp-&gt;f_id);</div><div class="line">		tfp = fh[idx];</div><div class="line">		if (tfp == fp) &#123;</div><div class="line">			fh[idx] = fp-&gt;f_next;</div><div class="line">		&#125; else &#123;</div><div class="line">			while (tfp-&gt;f_next != fp)</div><div class="line">				tfp = tfp-&gt;f_next;</div><div class="line">			tfp-&gt;f_next = fp-&gt;f_next;</div><div class="line">		&#125;</div><div class="line">		pthread_mutex_unlock(&amp;hashlock);</div><div class="line">		pthread_mutex_destroy(&amp;fp-&gt;f_lock);</div><div class="line">		return;</div><div class="line">	&#125; else &#123;</div><div class="line">		pthead_mutex_unlock(&amp;hashlock);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-读写锁"><a href="#3-读写锁" class="headerlink" title="3. 读写锁"></a>3. 读写锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;pthread.h&gt;</div><div class="line"></div><div class="line">struct job &#123;</div><div class="line">	struct job* j_next;</div><div class="line">	struct job* j_prev;</div><div class="line">	pthread j_id;</div><div class="line">&#125;;</div><div class="line">struct queue &#123;</div><div class="line">	struct job* q_head;</div><div class="line">	struct job* q_tail;</div><div class="line">	pthread_rwlock_t q_lock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int que_init(struct queue* qp) &#123;</div><div class="line">	int err;</div><div class="line">	qp-&gt;q_head = NULL;</div><div class="line">	qp-&gt;q_tail = NULL;</div><div class="line">	err = pthread_rwlock_init(&amp;qp-&gt;q_lock, NULL);</div><div class="line">	if (err != 0)</div><div class="line">		return err;</div><div class="line">	return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void job_insert(struct queue* qp, struct job* jp) &#123;</div><div class="line">	pthread_rwlock_wrlock(&amp;qp-&gt;q_lock);</div><div class="line">	jp-&gt;j_next = qp-&gt;q_head;</div><div class="line">	jp-&gt;j_prev = NULL;</div><div class="line">	if (qp-&gt;q_head != NULL)</div><div class="line">		qp-&gt;q_head-&gt;j_prev = jp;</div><div class="line">	else</div><div class="line">		qp-&gt;q_tail = jp;</div><div class="line">	qp-&gt;q_head = jp;</div><div class="line">	pthread_rwlock_unlock(&amp;qp-&gt;q_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void job_append(struct queue* qp, struct job* jp) &#123;</div><div class="line">	pthread_rwlock_wrlock(&amp;qp-&gt;q_lock);</div><div class="line">	jp-&gt;j_next = NULL;</div><div class="line">	jp-&gt;j_prev = qp-&gt;q_tail;</div><div class="line">	if (qp-&gt;q_tail != NULL)</div><div class="line">		qp-&gt;q_tail-&gt;j_next = jp;</div><div class="line">	else</div><div class="line">		qp-&gt;q_head = jp;</div><div class="line">	qp-&gt;q_tail = jp;</div><div class="line">	pthread_rwlock_unlock(&amp;qp-&gt;q_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">void job_remove(struct queue* qp, struct job* jp) &#123;</div><div class="line">	pthread_rwlock_wrlock(&amp;qp-&gt;q_lock);</div><div class="line">	if (jp == qp-&gt;q_head) &#123;</div><div class="line">		qp-&gt;q_head = jp-&gt;j_next;</div><div class="line">		if (qp-&gt;q_tail == jp)</div><div class="line">			qp-&gt;q_tail = NULL;</div><div class="line">		else</div><div class="line">			jp-&gt;j_next-&gt;j_prev = jp-&gt;j_prev;</div><div class="line">	&#125; else if (jp == qp-&gt;q_tail) &#123;</div><div class="line">		qp-&gt;tail = jp-&gt;j_prev;</div><div class="line">		jp-&gt;j_prev-&gt;j_next = jp-&gt;j_next;</div><div class="line">	&#125; else &#123;</div><div class="line">		jp-&gt;j_prev-&gt;j_next = jp-&gt;j_next;</div><div class="line">		jp-&gt;j_next-&gt;j_prev = jp-&gt;j_prev;</div><div class="line">	&#125;</div><div class="line">	pthread_rwlock_unlock(&amp;qp-&gt;q_lock);</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct job* job_find(struct queue* qp, pthread_t id) &#123;</div><div class="line">	struct job* jp;</div><div class="line">	if (pthread_rwlock_rdlock(&amp;qp-&gt;q_lock, NULL) != 0)</div><div class="line">		return NULL;</div><div class="line">	for (jp = qp-&gt;q_head; jp != NULL; jp = jp-&gt;j_next) &#123;</div><div class="line">		if (pthread_equal(jp-&gt;j_id, id))</div><div class="line">			break;</div><div class="line">	&#125;</div><div class="line">	pthread_rwlock_unlock(&amp;qp-&gt;q_lock);</div><div class="line">	return jp;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-条件变量"><a href="#4-条件变量" class="headerlink" title="4. 条件变量"></a>4. 条件变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">#include &lt;pthread.h&gt;</div><div class="line"></div><div class="line">struct msg &#123;</div><div class="line">	struct msg* m_next;</div><div class="line">&#125;</div><div class="line"></div><div class="line">struct msg* workq;</div><div class="line"></div><div class="line">pthread_cond_t qready = PTHREAD_COND_INITIALIZER;</div><div class="line">pthread_mutex_t qlock = PTHREAD_MUTEX_INITIALIZER;</div><div class="line"></div><div class="line">void process_msg() &#123;</div><div class="line">	struct msg* mp;</div><div class="line">	while (workq == NULL)</div><div class="line">		pthread_cond_wait(&amp;qready, &amp;qlock);</div><div class="line">	mp = workq;</div><div class="line">	workq = mp-&gt;m_next;</div><div class="line">	pthread_mutex_unlock(&amp;qlock);</div><div class="line">	/*process the mp*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">void enqueue_msg(struct msg* mp) &#123;</div><div class="line">	pthread_mutex_lock(&amp;qlock);</div><div class="line">	mp-&gt;m_next = workq;</div><div class="line">	workq = mp;</div><div class="line">	pthread_mutex_unlock(&amp;qlock);</div><div class="line">	pthread_cond_signal(&amp;qready);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-互斥量&quot;&gt;&lt;a href=&quot;#1-互斥量&quot; class=&quot;headerlink&quot; title=&quot;1. 互斥量&quot;&gt;&lt;/a&gt;1. 互斥量&lt;/h2&gt;&lt;p&gt;pthread的互斥接口保护数据，确保同一时间只有一个线程访问数据。从本质上说，互斥量是一把锁。对互斥量加锁以后
    
    </summary>
    
      <category term="pthread" scheme="http://yoursite.com/categories/pthread/"/>
    
    
  </entry>
  
  <entry>
    <title>线程（1）： 线程和线程标识</title>
    <link href="http://yoursite.com/2018/04/18/pthread1/"/>
    <id>http://yoursite.com/2018/04/18/pthread1/</id>
    <published>2018-04-18T11:28:27.000Z</published>
    <updated>2018-04-18T12:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>一个进程中的所有线程都可以访问该进程的组成部件，包括文件描述符和内存。<br>每个线程包含有表示执行环境所需要的信息，其中包括标识信息线程ID， 一组寄存器值，栈，调度优先级和策略、信号屏蔽字， error变量以及线程私有数据。<br>一个进程的所有信息对该进程的所有线程都是共享的， 包括可执行程序代码、程序的全局内存和堆内存，栈以及文件描述符。   </p>
<h2 id="2-线程标识"><a href="#2-线程标识" class="headerlink" title="2. 线程标识"></a>2. 线程标识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(1) 比较两个线程id</div><div class="line">int pthread_equal(pthread_t tid1, pthread_t tid2);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(2) 获得自身线程id</div><div class="line">pthread_t pthread_self(void);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h2&gt;&lt;p&gt;一个进程中的所有线程都可以访问该进程的组成部件，包括文件描述符和内存。&lt;br&gt;每个线程包含有表示执行环境所需要的信息，其
    
    </summary>
    
      <category term="apue, pthread" scheme="http://yoursite.com/categories/apue-pthread/"/>
    
    
  </entry>
  
  <entry>
    <title>避免zombie process</title>
    <link href="http://yoursite.com/2018/04/13/twofork/"/>
    <id>http://yoursite.com/2018/04/13/twofork/</id>
    <published>2018-04-13T09:21:52.000Z</published>
    <updated>2018-04-13T09:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-僵死进程"><a href="#1-僵死进程" class="headerlink" title="1.僵死进程"></a>1.僵死进程</h2><p>是指一个已经终止，但是其父进程尚未对其进行善后处理的进程，这个处理包括获取终止子进程的有关信息，释放它占用的资源等。</p>
<h2 id="2-两次fork避免zombie"><a href="#2-两次fork避免zombie" class="headerlink" title="2.两次fork避免zombie"></a>2.两次fork避免zombie</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">int main(void) &#123;</div><div class="line">    pid_t pid;</div><div class="line">    printf(&quot;parent id=%ld\n&quot;, (long)getpid());</div><div class="line">    if ((pid = fork()) &lt; 0)</div><div class="line">        err_sys(&quot;fork error&quot;);</div><div class="line">    else if (pid == 0) &#123;</div><div class="line">        if ((pid = fork()) &lt; 0)</div><div class="line">            err_sys(&quot;fork error&quot;);</div><div class="line">        else if (pid &gt; 0) </div><div class="line">            exit(0); //first child die</div><div class="line">        sleep(2);  </div><div class="line">        printf(&quot;second child, parent pid=%ld\n&quot;, (long)getppid());</div><div class="line">        exit(0);</div><div class="line">    &#125;</div><div class="line">    if (waitpid(pid, NULL ,0) != pid)</div><div class="line">        err_sys(&quot;waitpid error&quot;);</div><div class="line">    else</div><div class="line">        printf(&quot;first child pid=%d\n&quot;, pid);</div><div class="line">    exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ./a.out<br>parent id=3483<br>first child pid=3484<br>[root@centos apue]# second child, parent pid=1</p>
</blockquote>
<p>这里，第二个子进程最终由init进程（pid=1）收养， 那么它会变成一个僵死进程吗？<br>apue中给出的解释： 对于init，任何时候只要有一个子进程终止，它就会调用一个wait函数取得这个子进程的终止状态，这样就防止系统中塞满僵死进程。<br>一个init子进程可能是init直接产生的子进程，还有一种，就是如上，父进程终止，由init接管的子进程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-僵死进程&quot;&gt;&lt;a href=&quot;#1-僵死进程&quot; class=&quot;headerlink&quot; title=&quot;1.僵死进程&quot;&gt;&lt;/a&gt;1.僵死进程&lt;/h2&gt;&lt;p&gt;是指一个已经终止，但是其父进程尚未对其进行善后处理的进程，这个处理包括获取终止子进程的有关信息，释放它占用的
    
    </summary>
    
      <category term="apue" scheme="http://yoursite.com/categories/apue/"/>
    
    
  </entry>
  
</feed>
