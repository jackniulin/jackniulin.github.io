<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lin Niu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-04T14:22:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>好好活着。</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于dup和dup2的理解</title>
    <link href="http://yoursite.com/2018/06/04/dup/"/>
    <id>http://yoursite.com/2018/06/04/dup/</id>
    <published>2018-06-04T13:49:23.000Z</published>
    <updated>2018-06-04T14:22:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-dup和dup2"><a href="#1-dup和dup2" class="headerlink" title="1.dup和dup2"></a>1.dup和dup2</h2><p>都用于复制现有的文件描述符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">int dup(int fd);     </div><div class="line">int dup2(int fd, int fd2);</div><div class="line">```   </div><div class="line">区别：   </div><div class="line">dup返回的是当前可用文件描述符中的最小值。    </div><div class="line">dup2可以使用fd2指定新描述符的值。如果fd和fd2相等，dup2返回fd2， 而不关闭它。 否则，fd2的FD_CLOEXEC（执行时关闭）文件描述符的标志被清除，这样进程在调用exec时fd2时是打开状态。   </div><div class="line">返回的新文件描述符与fd共享同一个文件表项。   </div><div class="line"></div><div class="line">## 2.源代码分析</div></pre></td></tr></table></figure></p>
<p>static int dupfd(unsigned int fd, unsigned int arg)<br>{<br>    //文件句柄的值不能超过一个程序最多打开文件数，保证当前句柄的文件结构非空<br>    if (fd &gt;= NR_OPEN || !current-&gt;filp[fd])<br>        return -EBADF;<br>    if (arg &gt;= NR_OPEN)<br>        return -EINVAL;<br>    while (arg &lt; NR_OPEN)<br>        if (current-&gt;filp[arg])<br>            arg++;<br>        else<br>            break;<br>    if (arg &gt;= NR_OPEN)<br>        return -EMFILE;<br>    //清除执行时关闭标志，即在运行exec时不会关闭dup创建的句柄。<br>    current-&gt;close_on_exec &amp;= ~(1&lt;<arg); 指向同一个文件结构，文件引用计数+1="" (current-="">filp[arg] = current-&gt;filp[fd])-&gt;f_count++;<br>    return arg;<br>}<br>int sys_dup2(unsigned int oldfd, unsigned int newfd)<br>{<br>    //关闭文件系统调用<br>    sys_close(newfd);<br>    return dupfd(oldfd,newfd);<br>}<br>sysclose:<br>int sys_close(unsigned int fd)<br>{<br>    struct file * filp;</arg);></p>
<pre><code>if (fd &gt;= NR_OPEN)
    return -EINVAL;
current-&gt;close_on_exec &amp;= ~(1&lt;&lt;fd);
if (!(filp = current-&gt;filp[fd]))
    return -EINVAL;
current-&gt;filp[fd] = NULL;
//关闭之前引用计数为1说明内核出错
if (filp-&gt;f_count == 0)
    panic(&quot;Close: file count is 0&quot;);
//-1之后还不为0说明有其他进程正在使用该文件
if (--filp-&gt;f_count)
    return (0);
//否则释放文件的i节点结构
iput(filp-&gt;f_inode);
return (0);
</code></pre><p>}<br>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-dup和dup2&quot;&gt;&lt;a href=&quot;#1-dup和dup2&quot; class=&quot;headerlink&quot; title=&quot;1.dup和dup2&quot;&gt;&lt;/a&gt;1.dup和dup2&lt;/h2&gt;&lt;p&gt;都用于复制现有的文件描述符。&lt;br&gt;&lt;figure class=&quot;highl
    
    </summary>
    
      <category term="kernel" scheme="http://yoursite.com/categories/kernel/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 131. 分割回文串</title>
    <link href="http://yoursite.com/2018/05/30/leetcode131/"/>
    <id>http://yoursite.com/2018/05/30/leetcode131/</id>
    <published>2018-05-29T16:00:00.000Z</published>
    <updated>2018-06-04T12:24:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。</div><div class="line"></div><div class="line">返回 s 所有可能的分割方案。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">输入: &quot;aab&quot;</div><div class="line">输出:</div><div class="line">[</div><div class="line">  [&quot;aa&quot;,&quot;b&quot;],</div><div class="line">  [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;]</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>dfs一个函数，另外需要一个判断子串是否是回文串。难点在于dfs函数for循环参数的设置。</p>
<h2 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;vector&lt;string&gt;&gt; partition(string s) &#123;</div><div class="line">        vector&lt;vector&lt;string&gt;&gt; res;</div><div class="line">        vector&lt;string&gt; out;</div><div class="line">        dfs(s, out, 0, res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void dfs(string s, vector&lt;string&gt;&amp; out, int start, vector&lt;vector&lt;string&gt;&gt;&amp; res) &#123;</div><div class="line">        if (start == s.size()) &#123;</div><div class="line">            res.push_back(out);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        for (int i = start; i &lt; s.size(); i++) &#123;</div><div class="line">            if (judge(s, start, i)) &#123;</div><div class="line">                out.push_back(s.substr(start, i - start + 1));</div><div class="line">                dfs(s, out, i + 1, res);</div><div class="line">                out.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    bool judge(string s, int start, int end) &#123;</div><div class="line">        while (start &lt; end) &#123;</div><div class="line">            if (s[start] != s[end])</div><div class="line">                return false;</div><div class="line">            start++;</div><div class="line">            end--;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 0.12内核中signal的实现</title>
    <link href="http://yoursite.com/2018/05/25/signal1/"/>
    <id>http://yoursite.com/2018/05/25/signal1/</id>
    <published>2018-05-24T16:00:00.000Z</published>
    <updated>2018-05-30T08:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-sys-signal"><a href="#1-sys-signal" class="headerlink" title="1.sys_signal"></a>1.sys_signal</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">int sys_signal(int signum, long handler, long restorer)</div><div class="line">&#123;</div><div class="line">	struct sigaction tmp;</div><div class="line">	//SIGKILL和SIGSTOP不能被进程捕获</div><div class="line">	if (signum&lt;1 || signum&gt;32 || signum==SIGKILL || signum==SIGSTOP)</div><div class="line">		return -EINVAL;</div><div class="line">	tmp.sa_handler = (void (*)(int)) handler; //设置信号处理句柄</div><div class="line">	tmp.sa_mask = 0; </div><div class="line">	//该信号处理句柄只使用一次就恢复到默认值</div><div class="line">	tmp.sa_flags = SA_ONESHOT | SA_NOMASK; </div><div class="line">	tmp.sa_restorer = (void (*)(void)) restorer;</div><div class="line">	//取该信号原来的处理句柄，安装新句柄，返回旧句柄</div><div class="line">	handler = (long) current-&gt;sigaction[signum-1].sa_handler;</div><div class="line">	current-&gt;sigaction[signum-1] = tmp;</div><div class="line">	return handler;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-sys-sigaction"><a href="#2-sys-sigaction" class="headerlink" title="2.sys_sigaction"></a>2.sys_sigaction</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">int sys_sigaction(int signum, const struct sigaction * action,</div><div class="line">	struct sigaction * oldaction)</div><div class="line">&#123;</div><div class="line">	struct sigaction tmp;</div><div class="line"></div><div class="line">	if (signum&lt;1 || signum&gt;32 || signum==SIGKILL || signum==SIGSTOP)</div><div class="line">		return -EINVAL;</div><div class="line">	//取原sigaction</div><div class="line">	tmp = current-&gt;sigaction[signum-1];</div><div class="line">	//利用参数action设置新的sigaction</div><div class="line">	get_new((char *) action,</div><div class="line">		(char *) (signum-1+current-&gt;sigaction));</div><div class="line">	//若oldaction非空，利用前面保存的tmp填装oldaction</div><div class="line">	if (oldaction)</div><div class="line">		save_old((char *) &amp;tmp,(char *) oldaction);</div><div class="line">	//如果允许信号在自己的句柄中收到，设置sa_mak为0， 否则屏蔽这个信号</div><div class="line">	if (current-&gt;sigaction[signum-1].sa_flags &amp; SA_NOMASK)</div><div class="line">		current-&gt;sigaction[signum-1].sa_mask = 0;</div><div class="line">	else</div><div class="line">		current-&gt;sigaction[signum-1].sa_mask |= (1&lt;&lt;(signum-1));</div><div class="line">	return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-do-signal函数修改用户栈的过程："><a href="#3-do-signal函数修改用户栈的过程：" class="headerlink" title="3.do_signal函数修改用户栈的过程："></a>3.do_signal函数修改用户栈的过程：</h2><p><img src="http://ous5r4na6.bkt.clouddn.com/43D00015-AC14-45DD-B1C7-1B6067B59DF1.png" alt="">  </p>
<pre><code>int do_signal(long signr,long eax,long ebx, long ecx, long edx, long orig_eax,
    long fs, long es, long ds,
    long eip, long cs, long eflags,
    unsigned long * esp, long ss)
{
    unsigned long sa_handler;
    long old_eip=eip;  //eip为原本要执行的代码
    struct sigaction * sa = current-&gt;sigaction + signr - 1;
    int longs;

    unsigned long * tmp_esp;

#ifdef notdef
    printk(&quot;pid: %d, signr: %x, eax=%d, oeax = %d, int=%d\n&quot;,
        current-&gt;pid, signr, eax, orig_eax,
        sa-&gt;sa_flags &amp; SA_INTERRUPT);
#endif
    if ((orig_eax != -1) &amp;&amp;
        ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
        if ((eax == -ERESTARTSYS) &amp;&amp; ((sa-&gt;sa_flags &amp; SA_INTERRUPT) ||
            signr &lt; SIGCONT || signr &gt; SIGTTOU))
            *(&amp;eax) = -EINTR;
        else {
            *(&amp;eax) = orig_eax;
            *(&amp;eip) = old_eip -= 2;
        }
    }
    sa_handler = (unsigned long) sa-&gt;sa_handler;
    if (sa_handler==1)  //默认忽略句柄SIG_IGN,不作任何处理
        return(1);   /* Ignore, see if there are more signals... */
    if (!sa_handler) {
        switch (signr) {
        case SIGCONT:
        case SIGCHLD:
            return(1);  /* Ignore, ... */

        case SIGSTOP:
        case SIGTSTP:
        case SIGTTIN:
        case SIGTTOU:
            current-&gt;state = TASK_STOPPED;
            current-&gt;exit_code = signr;
            if (!(current-&gt;p_pptr-&gt;sigaction[SIGCHLD-1].sa_flags &amp;
                    SA_NOCLDSTOP))
                current-&gt;p_pptr-&gt;signal |= (1&lt;&lt;(SIGCHLD-1));
            return(1);  /* Reschedule another event */

        case SIGQUIT:
        case SIGILL:
        case SIGTRAP:
        case SIGIOT:
        case SIGFPE:
        case SIGSEGV:
            if (core_dump(signr))
                do_exit(signr|0x80);
            /* fall through */
        default:
            do_exit(signr);  //可作为wait()或wait_pid()函数的状态信息，取得进程的退出状态码或子进程终止的原因
        }
    }
    /*
     * OK, we&apos;re invoking a handler
     */
    if (sa-&gt;sa_flags &amp; SA_ONESHOT)
        sa-&gt;sa_handler = NULL; //该句柄只执行一次
    *(&amp;eip) = sa_handler; //eip指向信号处理程序
    longs = (sa-&gt;sa_flags &amp; SA_NOMASK)?7:8;
    *(&amp;esp) -= longs;
    verify_area(esp,longs*4);
    tmp_esp=esp;
    put_fs_long((long) sa-&gt;sa_restorer,tmp_esp++);
    put_fs_long(signr,tmp_esp++);
    if (!(sa-&gt;sa_flags &amp; SA_NOMASK))
        put_fs_long(current-&gt;blocked,tmp_esp++);
    put_fs_long(eax,tmp_esp++);
    put_fs_long(ecx,tmp_esp++);
    put_fs_long(edx,tmp_esp++);
    put_fs_long(eflags,tmp_esp++);
    put_fs_long(old_eip,tmp_esp++);
    current-&gt;blocked |= sa-&gt;sa_mask;
    return(0);        /* Continue, execute handler */
}
</code></pre><p>do_signal()执行完后，system_call.s将会把内核态堆栈上eip以下的所有值弹出。<br>在执行iret之后，内核态堆栈上的cs:eip，eflags, ss:esp被弹出，恢复到用户态中执行<br>而eip已经指向了信号处理程序，因此会立即执行用户自定义信号处理程序。<br>在该信号处理程序执行完后，通过ret指令，cpu把控制权交给sa_restorer所指向的恢复程序，sa_restorer会清理用户态堆栈，弹出信息，一直弹到old_eip，最后通过sa_restorer的ret弹出old_eip并跳转到其指向的代码中运行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-sys-signal&quot;&gt;&lt;a href=&quot;#1-sys-signal&quot; class=&quot;headerlink&quot; title=&quot;1.sys_signal&quot;&gt;&lt;/a&gt;1.sys_signal&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="kernel 0.12" scheme="http://yoursite.com/categories/kernel-0-12/"/>
    
    
  </entry>
  
  <entry>
    <title>信号</title>
    <link href="http://yoursite.com/2018/05/20/signal/"/>
    <id>http://yoursite.com/2018/05/20/signal/</id>
    <published>2018-05-19T16:00:00.000Z</published>
    <updated>2018-05-30T08:13:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>信号是一种软中断，它提供了一种异步事件处理的方法<br>信号出现时，内核的处理方式有三种：<br>1.忽略信号<br>2.捕捉信号<br>3.执行系统默认动作     </p>
<h2 id="2-函数signal"><a href="#2-函数signal" class="headerlink" title="2. 函数signal"></a>2. 函数signal</h2><blockquote>
<p>void (*signal (int signo, void ( *func )(int))) (int);<br>参数说明：signo是信号名， func为常量SIG_IGN, SIG_DFL, 或者处理该信号的函数地址</p>
</blockquote>
<p>signal函数实例:     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">int main(void) &#123;</div><div class="line">	if (signal(SIGUSR1, sig_usr) == SIG_ERR)</div><div class="line">		err_sys(&quot;can&apos;t catch SIGUSR1&quot;);</div><div class="line">	if (signal(SIGUSR2, sig_usr) == SIG_ERR)</div><div class="line">		err_sys(&quot;can&apos;t catch SIGUSR1&quot;);</div><div class="line">	for ( ; ; )</div><div class="line">		pause();     </div><div class="line">&#125;</div><div class="line">static void sig_usr(int signo) &#123;</div><div class="line">	if (signo == SIGUSR1)</div><div class="line">		printf(&quot;received SIGUSR1\n&quot;);</div><div class="line"></div><div class="line">	else if (signo == SIGUSR2)</div><div class="line">		printf(&quot;received SIGUSR2\n&quot;);</div><div class="line">	else</div><div class="line">		err_dump(&quot;received signal %d\n&quot;, signo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# kill -SIGUSR1 13082<br>received SIGUSR1<br>[root@centos apue]# kill -SIGUSR2 13082<br>received SIGUSR2<br>[root@centos apue]# kill  13082<br>SIGTERM默认的处理动作为终止！   </p>
</blockquote>
<h2 id="3-函数sigaction"><a href="#3-函数sigaction" class="headerlink" title="3.函数sigaction"></a>3.函数sigaction</h2><blockquote>
<p>int sigaction(int signo, const struct sigaction *restrict act, struct sigaction *restrict oact);<br>参数说明：signo为信号编号， 若act非空，修改其动作。若oact非空，借助oact指针返回该信号的上一个动作   </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">struct sigaction &#123;</div><div class="line">	void (*sa_handler)(int);</div><div class="line">	sigset_t sa_mask;</div><div class="line">	int sa_flags;</div><div class="line">	void (*sa_restorer)(void);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>sa_mask是一个信号集，在调用信号捕捉函数之前，要将该信号集加到进程的信号屏蔽字中，仅当从捕捉函数返回之时再恢复进程之前的信号屏蔽字</p>
</blockquote>
<p>用sigaction实现signal函数      </p>
<pre><code>Sigfunc* signal(int signo, Sigfunc* func) {    
    struct sigaction act, oact;    
    act.sa_handler = func;    
    sigemptyset(&amp;act.sa_mask); //初始化，清除指定信号集中的所有信号,也就是响应所有信号
    act.sa_flags = 0;
    if (signo == SIGALARM) {
#ifdef SA_INTERRUPT
        act.sa_flags |= SA_INTERRUPT; //由此信号中断的系统调用不自动重启
#endif      
    } else {
        act.sa_flags |= SA_RESTART;   //由此信号中断的系统调用自动重启
    }
    if (sigaction(signo, &amp;act, &amp;ocat) &lt; 0)
        return SIG_ERR;
    return oact.sa_handler;
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h2&gt;&lt;p&gt;信号是一种软中断，它提供了一种异步事件处理的方法&lt;br&gt;信号出现时，内核的处理方式有三种：&lt;br&gt;1.忽略信号&lt;br&gt;2
    
    </summary>
    
      <category term="apue, signal" scheme="http://yoursite.com/categories/apue-signal/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 338. Bit位计数</title>
    <link href="http://yoursite.com/2018/05/02/leetcode338/"/>
    <id>http://yoursite.com/2018/05/02/leetcode338/</id>
    <published>2018-05-01T16:00:00.000Z</published>
    <updated>2018-06-03T11:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h1><blockquote>
<p>给定一个非负整数 num。 对于范围 0 ≤ i ≤ num 中的每个数字 i ，计算其二进制数中的1的数目并将它们作为数组返回。</p>
<p>示例：<br>比如给定 num = 5 ，应该返回 [0,1,1,2,1,2].</p>
<p>进阶：<br>给出时间复杂度为O(n * sizeof(integer)) 的解答非常容易。 但是你可以在线性时间O(n)内用一次遍历做到吗？<br>要求算法的空间复杂度为O(n)。<br>你能进一步完善解法吗？ 在c ++或任何其他语言中不使用任何内置函数（如c++里的 __builtin_popcount）来执行此操作。  </p>
</blockquote>
<h1 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h1><p>参考论坛大神的代码，从1开始，偶数二进制形式所含1的个数与该数除以2后的结果所含1的个数相同，奇数的结果为：该数除以2后的所含1的个数结果加1   </p>
<h2 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; countBits(int num) &#123;</div><div class="line">        vector&lt;int&gt; res(1, 0);</div><div class="line">        for (int i = 1; i &lt;= num; i++) &#123;</div><div class="line">            if (i % 2 == 0)</div><div class="line">                res.push_back(res[i / 2]);</div><div class="line">            else</div><div class="line">                res.push_back(res[i / 2] + 1);</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个非负整数 num。 对于范围 0 ≤ i ≤ num 中的每个数字 i ，
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 814. 二叉树剪枝</title>
    <link href="http://yoursite.com/2018/04/23/leetcode814/"/>
    <id>http://yoursite.com/2018/04/23/leetcode814/</id>
    <published>2018-04-22T16:00:00.000Z</published>
    <updated>2018-06-04T08:02:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><blockquote>
<p>给定二叉树根结点 root ，此外树的每个结点的值要么是 0，要么是 1。</p>
<p>返回移除了所有不包含 1 的子树的原二叉树。</p>
<p>( 节点 X 的子树为 X 本身，以及所有 X 的后代。)  </p>
<p>示例1:<br>输入: [1,null,0,0,1]<br>输出: [1,null,0,null,1]    </p>
<p>示例2:<br>输入: [1,0,1,0,0,0,1]<br>输出: [1,null,1,null,1]   </p>
<p>示例3:<br>输入: [1,1,0,1,1,0,1,0]<br>输出: [1,1,0,1,1,null,1]</p>
<p>说明:<br>给定的二叉树最多有 100 个节点。<br>每个节点的值只会为 0 或 1 。</p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>后序遍历，判断是否满足剪枝的三个条件</p>
<h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.源代码"></a>3.源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    TreeNode* pruneTree(TreeNode* root) &#123;</div><div class="line">        if (root == nullptr)</div><div class="line">            return nullptr;</div><div class="line">        root-&gt;left = pruneTree(root-&gt;left);</div><div class="line">        root-&gt;right = pruneTree(root-&gt;right);</div><div class="line">        if (root-&gt;val == 0 &amp;&amp; root-&gt;left == nullptr &amp;&amp; root-&gt;right == nullptr)</div><div class="line">            return nullptr;</div><div class="line">        return root;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定二叉树根结点 root ，此外树的每个结点的值要么是 0，要么是 1。&lt;/
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="后序遍历" scheme="http://yoursite.com/tags/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>线程（1）： 线程和线程标识</title>
    <link href="http://yoursite.com/2018/04/18/pthread1/"/>
    <id>http://yoursite.com/2018/04/18/pthread1/</id>
    <published>2018-04-18T11:28:27.000Z</published>
    <updated>2018-04-18T12:04:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><p>一个进程中的所有线程都可以访问该进程的组成部件，包括文件描述符和内存。<br>每个线程包含有表示执行环境所需要的信息，其中包括标识信息线程ID， 一组寄存器值，栈，调度优先级和策略、信号屏蔽字， error变量以及线程私有数据。<br>一个进程的所有信息对该进程的所有线程都是共享的， 包括可执行程序代码、程序的全局内存和堆内存，栈以及文件描述符。   </p>
<h2 id="2-线程标识"><a href="#2-线程标识" class="headerlink" title="2. 线程标识"></a>2. 线程标识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(1) 比较两个线程id</div><div class="line">int pthread_equal(pthread_t tid1, pthread_t tid2);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(2) 获得自身线程id</div><div class="line">pthread_t pthread_self(void);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;&lt;/a&gt;1. 概念&lt;/h2&gt;&lt;p&gt;一个进程中的所有线程都可以访问该进程的组成部件，包括文件描述符和内存。&lt;br&gt;每个线程包含有表示执行环境所需要的信息，其
    
    </summary>
    
      <category term="apue, pthread" scheme="http://yoursite.com/categories/apue-pthread/"/>
    
    
  </entry>
  
  <entry>
    <title>避免zombie process</title>
    <link href="http://yoursite.com/2018/04/13/twofork/"/>
    <id>http://yoursite.com/2018/04/13/twofork/</id>
    <published>2018-04-13T09:21:52.000Z</published>
    <updated>2018-04-13T09:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-僵死进程"><a href="#1-僵死进程" class="headerlink" title="1.僵死进程"></a>1.僵死进程</h2><p>是指一个已经终止，但是其父进程尚未对其进行善后处理的进程，这个处理包括获取终止子进程的有关信息，释放它占用的资源等。</p>
<h2 id="2-两次fork避免zombie"><a href="#2-两次fork避免zombie" class="headerlink" title="2.两次fork避免zombie"></a>2.两次fork避免zombie</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">int main(void) &#123;</div><div class="line">    pid_t pid;</div><div class="line">    printf(&quot;parent id=%ld\n&quot;, (long)getpid());</div><div class="line">    if ((pid = fork()) &lt; 0)</div><div class="line">        err_sys(&quot;fork error&quot;);</div><div class="line">    else if (pid == 0) &#123;</div><div class="line">        if ((pid = fork()) &lt; 0)</div><div class="line">            err_sys(&quot;fork error&quot;);</div><div class="line">        else if (pid &gt; 0) </div><div class="line">            exit(0); //first child die</div><div class="line">        sleep(2);  </div><div class="line">        printf(&quot;second child, parent pid=%ld\n&quot;, (long)getppid());</div><div class="line">        exit(0);</div><div class="line">    &#125;</div><div class="line">    if (waitpid(pid, NULL ,0) != pid)</div><div class="line">        err_sys(&quot;waitpid error&quot;);</div><div class="line">    else</div><div class="line">        printf(&quot;first child pid=%d\n&quot;, pid);</div><div class="line">    exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ./a.out<br>parent id=3483<br>first child pid=3484<br>[root@centos apue]# second child, parent pid=1</p>
</blockquote>
<p>这里，第二个子进程最终由init进程（pid=1）收养， 那么它会变成一个僵死进程吗？<br>apue中给出的解释： 对于init，任何时候只要有一个子进程终止，它就会调用一个wait函数取得这个子进程的终止状态，这样就防止系统中塞满僵死进程。<br>一个init子进程可能是init直接产生的子进程，还有一种，就是如上，父进程终止，由init接管的子进程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-僵死进程&quot;&gt;&lt;a href=&quot;#1-僵死进程&quot; class=&quot;headerlink&quot; title=&quot;1.僵死进程&quot;&gt;&lt;/a&gt;1.僵死进程&lt;/h2&gt;&lt;p&gt;是指一个已经终止，但是其父进程尚未对其进行善后处理的进程，这个处理包括获取终止子进程的有关信息，释放它占用的
    
    </summary>
    
      <category term="apue" scheme="http://yoursite.com/categories/apue/"/>
    
    
  </entry>
  
  <entry>
    <title>冲洗内存流和追加写null字节策略</title>
    <link href="http://yoursite.com/2018/04/08/fmemopen/"/>
    <id>http://yoursite.com/2018/04/08/fmemopen/</id>
    <published>2018-04-08T11:43:42.000Z</published>
    <updated>2018-04-10T08:55:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-内存流"><a href="#1-内存流" class="headerlink" title="1.内存流"></a>1.内存流</h2><p>FILE <em>fmemopen(void </em>restrict buf, size_t size, const char *restrict type);<br>返回值： 成功返回流指针，错误返回NULL</p>
<h2 id="2-示例"><a href="#2-示例" class="headerlink" title="2.示例"></a>2.示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">int main() &#123;</div><div class="line">    FILE *fp;</div><div class="line">    char buf[BSZ];</div><div class="line"></div><div class="line">    memset(buf, &apos;a&apos;, BSZ - 2);</div><div class="line">    buf[BSZ-2] = &apos;\0&apos;;</div><div class="line">    buf[BSZ-1] = &apos;X&apos;;</div><div class="line">    </div><div class="line">	 //&quot;w+&quot;:把文件截断至0，为读和写打开</div><div class="line">    if ((fp = fmemopen(buf, BSZ, &quot;w+&quot;)) == NULL)</div><div class="line">        err_sys(&quot;fmemopen failed\n&quot;);</div><div class="line">    //1</div><div class="line">    //2</div><div class="line">    //3</div><div class="line">    //4    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>任何时候需要增加流缓冲中数据量以及调用fclose,fflush, fseek, fseeko以及fsetpos时会在当前位置写入一个null字节</strong><br>调用fmemopen函数在缓冲区开始放置null字符</p>
<h3 id="1-offset-0"><a href="#1-offset-0" class="headerlink" title="(1).offset=0"></a>(1).offset=0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">printf(&quot;initial buffer contents: %s\n&quot;, buf);</div><div class="line">fprintf(fp, &quot;hello, world&quot;);  //hello, world写入</div><div class="line">printf(&quot;before flush: %s\n&quot;, buf);</div><div class="line">fflush(fp);</div><div class="line">printf(&quot;after fflush: %s\n&quot;, buf);</div><div class="line">printf(&quot;length of string in buf = %ld\n&quot;, (long)strlen(buf));</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ./a.out<br>initial buffer contents:<br>before flushed:<br>after fflush: hello, world<br>length of string in buf = 12    </p>
</blockquote>
<p>hello, world共12个字符，此时offset=12, 偏移12处的内容为null(上面加深部分有提：调用fflush会在当前位置写入一个null字节)</p>
<h3 id="2-offset-12"><a href="#2-offset-12" class="headerlink" title="(2).offset=12"></a>(2).offset=12</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">memset(buf, &apos;b&apos;, BSZ - 2);</div><div class="line">buf[BSZ-2] = &apos;\0&apos;;</div><div class="line">buf[BSZ-1] = &apos;X&apos;;</div><div class="line">fprintf(fp, &quot;hello, world&quot;);</div><div class="line">fseek(fp, 0, SEEK_CUR);</div><div class="line">printf(&quot;after fseek SEEK_CUR: %s\n&quot;, buf);</div><div class="line">printf(&quot;length of string in buf = %ld\n&quot;, (long)strlen(buf));</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ./a.out<br>initial buffer contents:<br>before flushed:<br>after fflush: hello, world<br>length of string in buf = 12<br>after fseek SEEK_CUR: bbbbbbbbbbbbhello, world<br>length of string in buf = 24</p>
</blockquote>
<p>前12个被b填充，从offset=12开始填充hello, world字符串。同时，seek设置SEEK_CUR, offset=24.</p>
<h3 id="3-offset-24"><a href="#3-offset-24" class="headerlink" title="(3).offset=24"></a>(3).offset=24</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">memset(buf, &apos;c&apos;, BSZ - 2);</div><div class="line">buf[BSZ-2] = &apos;\0&apos;;</div><div class="line">buf[BSZ-1] = &apos;X&apos;;</div><div class="line">fprintf(fp, &quot;hello, world&quot;);</div><div class="line">fseek(fp, 0, SEEK_SET);</div><div class="line">printf(&quot;after fseek SEEK_SET: %s\n&quot;, buf);</div><div class="line">printf(&quot;length of string in buf = %ld\n&quot;, (long)strlen(buf));</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ./a.out<br>initial buffer contents:<br>before flushed:<br>after fflush: hello, world<br>length of string in buf = 12<br>after fseek SEEK_CUR: bbbbbbbbbbbbhello, world<br>length of string in buf = 24<br>after fseek SEEK_SET: cccccccccccccccccccccccchello, world<br>length of string in buf = 36  </p>
</blockquote>
<p>seek设置SEEK_SET之后，偏移值设置为缓冲区开始位置，即offset=0  </p>
<h3 id="4-offset-0"><a href="#4-offset-0" class="headerlink" title="(4).offset=0"></a>(4).offset=0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">memset(buf, &apos;d&apos;, BSZ - 2);</div><div class="line">   buf[BSZ-2] = &apos;\0&apos;;</div><div class="line">   buf[BSZ-1] = &apos;X&apos;;</div><div class="line">   fprintf(fp, &quot;hello, world&quot;);</div><div class="line">   </div><div class="line">   fclose(fp);</div><div class="line">   printf(&quot;after close: %s\n&quot;, buf);</div><div class="line">   printf(&quot;length of string in buf = %ld\n&quot;, (long)strlen(buf));</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ./a.out<br>initial buffer contents:<br>before flushed:<br>after fflush: hello, world<br>length of string in buf = 12<br>after fseek SEEK_CUR: bbbbbbbbbbbbhello, world<br>length of string in buf = 24<br>after fseek SEEK_SET: cccccccccccccccccccccccchello, world<br>length of string in buf = 36<br>after close: hello, worlddddddddddddddddddddddddddddddddddd<br>length of string in buf = 46    </p>
</blockquote>
<p>这里调用了fclose，前面提到本应追加null字节，但是这里没有，为什么呢？？？    </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-内存流&quot;&gt;&lt;a href=&quot;#1-内存流&quot; class=&quot;headerlink&quot; title=&quot;1.内存流&quot;&gt;&lt;/a&gt;1.内存流&lt;/h2&gt;&lt;p&gt;FILE &lt;em&gt;fmemopen(void &lt;/em&gt;restrict buf, size_t size, con
    
    </summary>
    
      <category term="apue" scheme="http://yoursite.com/categories/apue/"/>
    
    
      <category term="apue" scheme="http://yoursite.com/tags/apue/"/>
    
      <category term="IO" scheme="http://yoursite.com/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>unbuffered IO</title>
    <link href="http://yoursite.com/2018/04/01/uio/"/>
    <id>http://yoursite.com/2018/04/01/uio/</id>
    <published>2018-03-31T16:00:00.000Z</published>
    <updated>2018-06-01T07:24:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-unbuffered-IO"><a href="#1-unbuffered-IO" class="headerlink" title="1. unbuffered IO"></a>1. unbuffered IO</h3><p>与标准IO对应，不带缓冲指的是read和write都调用内核的系统调用。<br>对于内核而言，所有打开的文件都通过文件描述符引用。<br>按照惯例， 文件描述符0与标准输入关联，1与标准输出关联，2与标准错误关联。<br>分别被定义为STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO. </p>
<h3 id="2-lseek"><a href="#2-lseek" class="headerlink" title="2. lseek"></a>2. lseek</h3><p><code>off_t lseek(int fd, off_t offset, int whence)</code><br>返回值： 成功返回新的文件偏移量，失败返回-1    </p>
<p>tips: 此操作只修改文件表项中当前文件偏移量，不作任何IO处理</p>
<p>参数offset的解释依赖于参数whence的值:   </p>
<blockquote>
<p>SEEK_SET， 将文件偏移量设置为距文件开始出offset个字节<br>SEEK_CUR, 将文件偏移量设置为当前值加offset, offset可正可负<br>SEEK_END, 将文件便宜来那个设置为文件长度加offset, offset同样可正可负   </p>
</blockquote>
<p>lseek用于创建空洞文件的实例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">char buf1[] = &quot;abcdefghij&quot;;</div><div class="line">char buf2[] = &quot;ABCDEFGHIJ&quot;;</div><div class="line"></div><div class="line">int</div><div class="line">main(void)</div><div class="line">&#123;</div><div class="line">    int fd;</div><div class="line"></div><div class="line">    if ((fd = creat(&quot;/root/apue/file.hole&quot;, FILE_MODE)) &lt; 0)</div><div class="line">        err_sys(&quot; create error&quot;);</div><div class="line">    if (write(fd, buf1, 10) != 10)</div><div class="line">        err_sys(&quot;buf1 write error&quot;);</div><div class="line">	 //偏移量为10</div><div class="line">    if (lseek(fd, 16384, SEEK_SET) == -1)</div><div class="line">        err_sys(&quot;lseek error&quot;);</div><div class="line">    //偏移量为16384</div><div class="line">    if (write(fd, buf2, 10) != 10)</div><div class="line">        err_sys(&quot;buf2 write error&quot;);</div><div class="line">	 //偏移量为16394</div><div class="line">    exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行结果：<br>[root@centos apue]# ls -l file.hole<br>-rw-r–r–. 1 root root 16394 Apr  1 01:25 file.hole   </p>
</blockquote>
<h3 id="3-内核表示打开文件的结构"><a href="#3-内核表示打开文件的结构" class="headerlink" title="3.内核表示打开文件的结构"></a>3.内核表示打开文件的结构</h3><p>1.每个进程在进程表中都有一个记录项， 记录项中包含一张打开文件描述符表，这里在Linux0.12中应该是对应的: struct file * filp[NR_OPEN];<br>2.内核为所有打开文件维持一张打开文件表<br>3.每个打开文件都有一个v节点结构，这里注意，linux中没有v节点，而是使用通用的i节点  </p>
<p>unix打开文件的内核数据结构：<br><img src="http://ous5r4na6.bkt.clouddn.com/2.png" alt=""></p>
<p>下图是0.12内核中进程打开文件使用的内核数据结构：<br><img src="http://ous5r4na6.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180601150803.png" alt="">   </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-unbuffered-IO&quot;&gt;&lt;a href=&quot;#1-unbuffered-IO&quot; class=&quot;headerlink&quot; title=&quot;1. unbuffered IO&quot;&gt;&lt;/a&gt;1. unbuffered IO&lt;/h3&gt;&lt;p&gt;与标准IO对应，不带缓冲指的是r
    
    </summary>
    
      <category term="apue" scheme="http://yoursite.com/categories/apue/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 807.保持城市天际线</title>
    <link href="http://yoursite.com/2018/03/25/leetcode807/"/>
    <id>http://yoursite.com/2018/03/25/leetcode807/</id>
    <published>2018-03-24T16:00:00.000Z</published>
    <updated>2018-05-31T08:18:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote>
<p>在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许增加任何数量（不同建筑物的数量可能不同）的建筑物的高度。 高度 0 也被认为是建筑物。</p>
<p>最后，从新数组的所有四个方向（即顶部，底部，左侧和右侧）观看的“天际线”必须与原始数组的天际线相同。 城市的天际线是从远处观看时，由所有建筑物形成的矩形的外部轮廓。 请看下面的例子。</p>
<p>建筑物高度可以增加的最大总和是多少？<br>例子：<br>输入： grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]<br>输出： 35<br>解释：<br>The grid is:<br>[ [3, 0, 8, 4],<br> [2, 4, 5, 7],<br> [9, 2, 6, 3],<br> [0, 3, 1, 0] ]   </p>
<p>从数组竖直方向（即顶部，底部）看“天际线”是：[9, 4, 8, 7]<br>从水平水平方向（即左侧，右侧）看“天际线”是：[8, 7, 9, 3]   </p>
<p>在不影响天际线的情况下对建筑物进行增高后，新数组如下：</p>
<p>gridNew = [ [8, 4, 8, 7],<br>           [7, 4, 7, 7],<br>           [9, 4, 8, 7],<br>           [3, 3, 3, 3] ]   </p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>首先明确题意，侧面就是从每行看，顶部就是从每列看。用两个数组side和top分别记录每行与每列的最大值。最后就是遍历二维数组，将原数组中对应项的值更换为其所处的行与列之间的最小值，并记录这个值与原来值的差，并叠加到结果res中。</p>
<h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.源代码"></a>3.源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int maxIncreaseKeepingSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;</div><div class="line">        int rows = grid.size();</div><div class="line">        int cols = grid[0].size();</div><div class="line">        vector&lt;int&gt; top;</div><div class="line">        vector&lt;int&gt; side;</div><div class="line">        for (int i = 0; i &lt; rows; i++) &#123;</div><div class="line">            int m = INT_MIN;</div><div class="line">            for (int j = 0; j &lt; cols; j++) &#123;</div><div class="line">                if (grid[i][j] &gt; m)</div><div class="line">                    m = grid[i][j];</div><div class="line">            &#125;</div><div class="line">            side.push_back(m);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; cols; i++) &#123;</div><div class="line">            int m = INT_MIN;</div><div class="line">            for (int j = 0; j &lt; rows; j++) &#123;</div><div class="line">                if (grid[j][i] &gt; m)</div><div class="line">                    m = grid[j][i];</div><div class="line">            &#125;</div><div class="line">            top.push_back(m);</div><div class="line">        &#125;</div><div class="line">        int res = 0;</div><div class="line">        for (int i = 0; i &lt; rows; i++) &#123;</div><div class="line">            for (int j = 0; j &lt; cols; j++) &#123;</div><div class="line">                int tmp = min(top[j], side[i]);</div><div class="line">                res += tmp - grid[i][j];</div><div class="line">                grid[i][j] = tmp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在二维数组grid中，grid[i][j]代表位于某处的建筑物的高度。 我们被允许
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 826. Most Profit Assigning Work</title>
    <link href="http://yoursite.com/2018/03/22/leetcode826/"/>
    <id>http://yoursite.com/2018/03/22/leetcode826/</id>
    <published>2018-03-21T16:00:00.000Z</published>
    <updated>2018-05-30T14:19:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote>
<p>We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job.    </p>
<p>Now we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i].    </p>
<p>Every worker can be assigned at most one job, but one job can be completed multiple times.</p>
<p>For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.</p>
<p>What is the most profit we can make?   </p>
<p><strong>Example 1:</strong><br>Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]<br>Output: 100<br>Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.</p>
<p><strong>Notes:</strong><br>1 &lt;= difficulty.length = profit.length &lt;= 10000<br>1 &lt;= worker.length &lt;= 10000<br>difficulty[i], profit[i], worker[i]  are in range [1, 10^5]    </p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>题目的目的是得到worker数组能拿到的最大的profit. 用一个map来保存一对difficulty, profit之间的对应关系。需要注意的是题目给的difficulty数组和profit数组都是没有排序的，这就可能存在两个difficulty相同但是对应的profit大小不同的情况，我们保留profit大的项，舍弃profit小的项。<br>如果difficulty大但是它的profit却比比它difficulty小的profit小，这是问题的关键，需要把difficulty大的对应的profit变为它前面diffculty小profit却大的值。调整完profit之后，把difficulty从大到小排序。<br>从前往后遍历worker数组，找到每个worker实际能做的difficulty,并将该difficulty保存在对应的worker项中。最后计算总的收益。</p>
<h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.源代码"></a>3.源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int maxProfitAssignment(vector&lt;int&gt;&amp; difficulty, vector&lt;int&gt;&amp; profit, vector&lt;int&gt;&amp; worker) &#123;</div><div class="line">        int res = 0;</div><div class="line">        unordered_map&lt;int, int&gt; map; </div><div class="line">        for (int i = 0; i &lt; difficulty.size(); i++) &#123;</div><div class="line">            if (map.count(difficulty[i]) &gt; 0) &#123;</div><div class="line">                if (map[difficulty[i]] &lt; profit[i])</div><div class="line">                    map[difficulty[i]] = profit[i];</div><div class="line">                else</div><div class="line">                    continue;</div><div class="line">            &#125; else &#123;</div><div class="line">                map[difficulty[i]] = profit[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sort(difficulty.begin(), difficulty.end());</div><div class="line">      </div><div class="line">        for (int i = 1; i &lt; difficulty.size(); i++)</div><div class="line">            if (map[difficulty[i]] &lt; map[difficulty[i - 1]])</div><div class="line">                map[difficulty[i]] =  map[difficulty[i - 1]];</div><div class="line">        </div><div class="line">        for (int i = 0; i &lt; worker.size(); i++) &#123;</div><div class="line">            for (int j = 0; j &lt; difficulty.size(); ) &#123;</div><div class="line">                while (j &lt; difficulty.size() &amp;&amp; worker[i] &gt; difficulty[j]) </div><div class="line">                    j++;</div><div class="line">                if (j == difficulty.size()) &#123;</div><div class="line">                    worker[i] = difficulty[j - 1];</div><div class="line">                    break;</div><div class="line">                &#125;               </div><div class="line">                if (worker[i] == difficulty[j]) </div><div class="line">                    break;</div><div class="line"></div><div class="line">                if (worker[i] &lt; difficulty[j]) &#123;</div><div class="line">                    if (j == 0)  </div><div class="line">                        worker[i] = 0;</div><div class="line">                    else </div><div class="line">                        worker[i] = difficulty[j - 1];</div><div class="line">                    break;</div><div class="line">                &#125;        </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for (int i = 0; i &lt; worker.size(); i++) &#123;</div><div class="line">            if (worker[i] == 0)</div><div class="line">                continue;</div><div class="line">            res += map[worker[i]];</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;We have jobs: difficulty[i] is the diffic
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 94. 二叉树的中序遍历</title>
    <link href="http://yoursite.com/2018/03/21/leetcode94/"/>
    <id>http://yoursite.com/2018/03/21/leetcode94/</id>
    <published>2018-03-20T16:00:00.000Z</published>
    <updated>2018-06-04T08:06:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">给定一个二叉树，返回它的中序遍历。</div><div class="line"></div><div class="line">示例:</div><div class="line"></div><div class="line">输入: [1,null,2,3]</div><div class="line">   1</div><div class="line">    \</div><div class="line">     2</div><div class="line">    /</div><div class="line">   3</div><div class="line"></div><div class="line">输出: [1,3,2]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>典型的中序遍历代码</p>
<h2 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; inorderTraversal(TreeNode* root) &#123;</div><div class="line">        vector&lt;int&gt; res;</div><div class="line">        helper(root, res);</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">    void helper(TreeNode* root, vector&lt;int&gt;&amp; res) &#123;</div><div class="line">        if (root == nullptr)</div><div class="line">            return;</div><div class="line">        if (root-&gt;left)</div><div class="line">            helper(root-&gt;left, res);</div><div class="line">        res.push_back(root-&gt;val);</div><div class="line">        if (root-&gt;right)</div><div class="line">            helper(root-&gt;right, res);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>分布式事务的提交</title>
    <link href="http://yoursite.com/2018/03/19/committransaction/"/>
    <id>http://yoursite.com/2018/03/19/committransaction/</id>
    <published>2018-03-19T09:31:48.000Z</published>
    <updated>2018-04-08T10:26:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-分布式事务的提交"><a href="#1-分布式事务的提交" class="headerlink" title="1.分布式事务的提交"></a>1.分布式事务的提交</h2><p>分布式日志在本地实现为一个文件，分布式事务就是文件当中的一个记录，在系统中一次本地事务的提交对应若干个分布式事务记录的持久化，称之为分布式事务的提交。</p>
<p>在文件系统的挂载过程中，在exfs_fill_super过程中，为jbd2本地日志系统的提交注册了一个钩子函数exfs_commit_callback，用于处理单词本地事务的提交所引发的若干个分布式事务的提交的<strong>后处理</strong>（确认消息的发送）  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-分布式事务的提交&quot;&gt;&lt;a href=&quot;#1-分布式事务的提交&quot; class=&quot;headerlink&quot; title=&quot;1.分布式事务的提交&quot;&gt;&lt;/a&gt;1.分布式事务的提交&lt;/h2&gt;&lt;p&gt;分布式日志在本地实现为一个文件，分布式事务就是文件当中的一个记录，在系统中一
    
    </summary>
    
      <category term="分布式" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode 78. 子集</title>
    <link href="http://yoursite.com/2018/03/17/leetcode78/"/>
    <id>http://yoursite.com/2018/03/17/leetcode78/</id>
    <published>2018-03-16T16:00:00.000Z</published>
    <updated>2018-06-04T08:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</div><div class="line"></div><div class="line">说明：解集不能包含重复的子集。</div><div class="line"></div><div class="line">示例:    </div><div class="line"></div><div class="line">输入: nums = [1,2,3]</div><div class="line">输出:   </div><div class="line">[   </div><div class="line">  [3],   </div><div class="line">  [1],   </div><div class="line">  [2],   </div><div class="line">  [1,2,3],   </div><div class="line">  [1,3],   </div><div class="line">  [2,3],   </div><div class="line">  [1,2],   </div><div class="line">  []   </div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>空集是一个子集。每次拿出现有集合中的一个子集，插入当前元素</p>
<blockquote>
<p>开始：[]<br>i = 0， [1], res = [[],[1]]<br>i = 1, [2], [1, 2], res = [[], [1], [2], [1, 2]]<br>i = 2, [3], [1, 3], [2, 3], [1, 2, 3], res = [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]   </p>
</blockquote>
<h2 id="3-源码"><a href="#3-源码" class="headerlink" title="3.源码"></a>3.源码</h2><pre><code>lass Solution {
public:
    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {
        vector&lt;vector&lt;int&gt;&gt; res;
        res.push_back({});

        for (int i = 0; i &lt; nums.size(); i++) {
            int length = res.size();
            for (int j = 0; j &lt; length; j++) {
                res.push_back(res[j]);
                res.back().push_back(nums[i]);
            }
        }

        return res;
    }
};
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>两阶段和三阶段提交协议的理解</title>
    <link href="http://yoursite.com/2018/03/15/2pcAnd3pc/"/>
    <id>http://yoursite.com/2018/03/15/2pcAnd3pc/</id>
    <published>2018-03-15T04:09:16.000Z</published>
    <updated>2018-04-08T10:26:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-2pc说明"><a href="#1-2pc说明" class="headerlink" title="1. 2pc说明"></a>1. 2pc说明</h2><p><strong>第一阶段(请求提交阶段)</strong><br>1.协调者节点向所有参与者节点询问是否可以执行提交操作，并开始等待各参与者节点的响应。<br>2.参与者节点执行询问发起为止的所有事务操作，并将undo和redo信息写进日志<br>3.各参与者节点响应协调者节点发起的询问。<br><strong>第二阶段(提交执行阶段)</strong><br>成功：<br>当协调者节点从所有参与者节点获得的相应消息都为”同意”时：<br>1.协调者节点向所有参与者节点发出”正式提交”的请求。<br>2.与者节点正式完成操作，并释放在整个事务期间内占用的资源。<br>3.参与者节点向协调者节点发送”完成”消息。<br>4.协调者节点收到所有参与者节点反馈的”完成”消息后，完成事务。<br>失败：<br>如果任一参与者节点在第一阶段返回的响应消息为”终止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：<br>1.协调者节点向所有参与者节点发出”回滚操作”的请求。<br>2.参与者节点利用之前写入的Undo信息执行回滚，并释放在整个事务期间内占用的资源。<br>3.参与者节点向协调者节点发送”回滚完成”消息。<br>4.协调者节点收到所有参与者节点反馈的”回滚完成”消息后，取消事务。<br><strong>缺点</strong><br>很明显，容易陷入阻塞状态，占用资源得不到释放；另外，第二阶段如果协调者向参与者发出提交操作，而参与者此时崩溃，协调者无法获取参与者的响应信息。</p>
<h2 id="2-3pc说明"><a href="#2-3pc说明" class="headerlink" title="2. 3pc说明"></a>2. 3pc说明</h2><p><img src="http://ous5r4na6.bkt.clouddn.com/static/images/3pc.png" alt="">  </p>
<p>下面这段是网上看到的，解释3pc为什么相对于2pc会减少阻塞：</p>
<blockquote>
<p>在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，会在等待超时之后，会继续进行事务的提交。（其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了PreCommit请求，那么协调者产生PreCommit请求的前提条件是他在第二阶段开始之前，收到所有参与者的CanCommit响应都是Yes。（一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了）所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大） </p>
</blockquote>
<p>特殊情况：如果协调者发送了abort而某个参与者没有收到，超时之后执行commit，其他的参与者接收abort之后执行回滚，这种情况下参与者之间存在数据不一致的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-2pc说明&quot;&gt;&lt;a href=&quot;#1-2pc说明&quot; class=&quot;headerlink&quot; title=&quot;1. 2pc说明&quot;&gt;&lt;/a&gt;1. 2pc说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;第一阶段(请求提交阶段)&lt;/strong&gt;&lt;br&gt;1.协调者节点向所有参与者节点
    
    </summary>
    
      <category term="分布式" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="协议" scheme="http://yoursite.com/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 260. 只出现一次的数字 III</title>
    <link href="http://yoursite.com/2018/03/15/leetcode260/"/>
    <id>http://yoursite.com/2018/03/15/leetcode260/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2018-05-31T07:43:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h2><blockquote>
<p>给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。   </p>
<p>示例 :   </p>
<p>输入: [1,2,1,3,2,5]<br>输出: [3,5]<br>注意：</p>
<p>结果输出的顺序并不重要，对于上面的例子， [5, 3] 也是正确答案。<br>你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>第一种容易想到的是使用map，这个比较容易实现。<br>第二种，利用位运算。题目中说有两个元素出现一次，其余元素出现两次。使用异或运算，出现两次的元素经过异或运算就不存在了，这时候最后的结果就是那两个只出现过一次的元素它俩异或的结果。<br>之后，我们获取异或运算结果转化成二进制时的第一个’1’的索引号，对于题目给出的示例，异或结果为6（110），第一个’1’的索引就是1<br>将nums数组中的元素按照第index位的结果分成两组。如示例，划分结果： （1, 1, 5）, (2, 2, 3)</p>
<h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.源代码"></a>3.源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    vector&lt;int&gt; singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        vector&lt;int&gt; res(2, 0);</div><div class="line">        int num = 0, index = 0;</div><div class="line">        for (int n : nums)</div><div class="line">            num ^= n;</div><div class="line"> </div><div class="line">        while ((num &amp; 1) == 0) &#123;</div><div class="line">            num &gt;&gt;= 1;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        for (int n : nums) &#123;</div><div class="line">            if ((n &gt;&gt; index) &amp; 1)</div><div class="line">                res[0] ^= n;</div><div class="line">            else</div><div class="line">                res[1] ^= n;</div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1. 题目描述&quot;&gt;&lt;/a&gt;1. 题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 137. 只出现一次的数字 II</title>
    <link href="http://yoursite.com/2018/03/13/leetcode137/"/>
    <id>http://yoursite.com/2018/03/13/leetcode137/</id>
    <published>2018-03-12T16:00:00.000Z</published>
    <updated>2018-06-04T08:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p>
<p>说明：<br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p>示例 1:<br>输入: [2,2,3,2]<br>输出: 3    </p>
<p>示例 2:<br>输入: [0,1,0,1,0,1,99]<br>输出: 99</p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>map依然可以解决，但是显然不是出题人想要的解法，而且效率比较低,beats 18%左右。<br>使用位运算。用32位记录一个元素的二进制表示形式，从0位开始，每次用一个sum记录该位上所有元素1的个数，取模，再左移(大小为索引位i)，对所有位上的结果做或运算</p>
<h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.源代码"></a>3.源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        unordered_map&lt;int, int&gt; map;</div><div class="line">        for (int n : nums)</div><div class="line">            map[n]++;</div><div class="line">        for (auto it : map)</div><div class="line">            if (it.second &lt; 3)</div><div class="line">                return it.first;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int res = 0;</div><div class="line">        for (int i = 0; i &lt; 32; i++) &#123;</div><div class="line">            int sum = 0;</div><div class="line">            for (int j = 0; j &lt; nums.size(); j++) </div><div class="line">                sum += (nums[j] &gt;&gt; i) &amp; 1;</div><div class="line">            res |= ((sum % 3) &lt;&lt; i); </div><div class="line">        &#125;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 136. 只出现一次的数字</title>
    <link href="http://yoursite.com/2018/03/11/leetcode136/"/>
    <id>http://yoursite.com/2018/03/11/leetcode136/</id>
    <published>2018-03-10T16:00:00.000Z</published>
    <updated>2018-05-31T08:20:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：<br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p>示例 1:<br>输入: [2,2,1]<br>输出: 1    </p>
<p>示例 2:<br>输入: [4,1,2,1,2]<br>输出: 4 </p>
</blockquote>
<h2 id="2-思路"><a href="#2-思路" class="headerlink" title="2.思路"></a>2.思路</h2><p>map解决问题依然有效，可以用。<br>说另外一种更巧妙的方法，用异或运算，题目中已经明确说了：除了最后你要获取的那个元素，其它的元素每个都出现了两次。把所有的元素进行异或，相同的元素抵消掉了，剩下的那个就是需要的元素。</p>
<h2 id="3-源代码"><a href="#3-源代码" class="headerlink" title="3.源代码"></a>3.源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Solution &#123;</div><div class="line">public:</div><div class="line">    int singleNumber(vector&lt;int&gt;&amp; nums) &#123;</div><div class="line">        int res = 0;</div><div class="line">        for (int n : nums)</div><div class="line">            res ^= n;</div><div class="line">        return res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>剑指1_二维数组中的查找</title>
    <link href="http://yoursite.com/2018/03/01/searinarray/"/>
    <id>http://yoursite.com/2018/03/01/searinarray/</id>
    <published>2018-03-01T11:52:56.000Z</published>
    <updated>2018-04-08T10:30:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<h2 id="2-源代码"><a href="#2-源代码" class="headerlink" title="2.源代码"></a>2.源代码</h2><pre><code>class Solution {
public:
    bool Find(int target, vector&lt;vector&lt;int&gt;&gt; array) {
        bool found = false;
        int row = 0;
        int col = array[0].size() - 1;
        while (row &lt;= array.size() - 1 &amp;&amp; col &gt;= 0) {
            if (target == array[row][col]) {
                found = true;
                break;
            } 
            else if (target &lt; array[row][col])
                col--;
            else
                row++;
        }
        return found
    }
};
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
  </entry>
  
</feed>
