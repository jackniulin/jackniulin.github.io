<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厚积薄发</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-19T01:28:39.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>人生实苦，但请你足够相信</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mdtest元数据测试</title>
    <link href="http://yoursite.com/2017/09/11/mdtest/"/>
    <id>http://yoursite.com/2017/09/11/mdtest/</id>
    <published>2017-09-11T13:32:34.000Z</published>
    <updated>2017-09-19T01:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>环境为SUSE11<br><code>CLT1:~ # zypper in openmpi openmpi-devel</code><br>报错：    </p>
<blockquote>
<p>Error building the cache:<br>[|] Repository type can’t be determined.<br>Warning: Disabling repository ‘nonoss’ because of the above error.<br>Error building the cache:<br>[|] Repository type can’t be determined.<br>Warning: Disabling repository ‘update’ because of the above error.<br>Failed to mount dvd:///?devices=/dev/sr1 on /var/adm/mount/AP_0x00000001: Mounting media failed (mount: no medium found on /dev/sr1)    </p>
</blockquote>
<p>解决：<br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/mdtest.png" alt=""></p>
<p><code>CLT1:~ # zypper mr --disable 1</code>    </p>
<blockquote>
<p>Repository ‘SUSE-Linux-Enterprise-Server-11-SP1_11.1.1-1.152’ has been successfully disabled. </p>
</blockquote>
<p><code>CLT1:~ # zypper mr --disable 2</code>    </p>
<blockquote>
<p>Repository ‘SUSE-Linux-Enterprise-Software-Development-Kit-11-SP1_11.1.1-1.57’ has been successfully disabled.</p>
</blockquote>
<p><code>CLT1:~ # zypper mr --disable 4</code>    </p>
<blockquote>
<p>Repository ‘nonoss’ has been successfully disabled.</p>
</blockquote>
<p><code>CLT1:~ # zypper mr --disable 5</code>    </p>
<blockquote>
<p>Repository ‘update’ has been successfully disabled.</p>
</blockquote>
<p><strong>下载</strong><br><a href="https://jaist.dl.sourceforge.net/project/mdtest/mdtest%20latest/mdtest-1.9.3/mdtest-1.9.3.tgz" target="_blank" rel="external">mdtest</a><br>需要修改Makefile文件：    </p>
<blockquote>
<p>mdtest: mdtest.c<br>    mpicc -Wall -D $(OS) $(LARGE_FILE) $(MDTEST_FLAGS) -g -o mdtest mdtest.c -lm</p>
</blockquote>
<p><code>make mdtest</code></p>
<p><img src="http://ous5r4na6.bkt.clouddn.com/static/images/mdtest1.png" alt=""></p>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><p>把openmpi和mdtest环境变量导出来<br><code>CLT1:~ # cat ./.bashrc</code>    </p>
<blockquote>
<p>export PATH=$PATH:/usr/lib64/mpi/gcc/openmpi/bin<br>export PATH=$PATH:/root/mdtest</p>
</blockquote>
<p>mdtest -h 看下选项，README里有几个例子。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h2&gt;&lt;p&gt;环境为SUSE11&lt;br&gt;&lt;code&gt;CLT1:~ # zypper in openmpi openmpi-devel&lt;/c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>filebench测试</title>
    <link href="http://yoursite.com/2017/08/29/filebench/"/>
    <id>http://yoursite.com/2017/08/29/filebench/</id>
    <published>2017-08-29T03:38:29.000Z</published>
    <updated>2017-08-29T08:32:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-filebench下载"><a href="#1-filebench下载" class="headerlink" title="1.filebench下载"></a>1.filebench下载</h2><p>客户端安装：<a href="https://github.com/zfsonlinux/filebench" target="_blank" rel="external">filebench</a>       </p>
<p>系统:SUSE Linux Enterprise Server 11 SP1  (x86_64)       </p>
<blockquote>
<p>Filebench is a file system and storage benchmark that can generate a large<br>variety of workloads. Unlike typical benchmarks it is extremely flexible and<br>allows to specify application’s I/O behavior using its extensive Workload Model<br>Language (WML).       </p>
</blockquote>
<h2 id="2-用户自定义工作负载"><a href="#2-用户自定义工作负载" class="headerlink" title="2.用户自定义工作负载"></a>2.用户自定义工作负载</h2><p>示例：<br>一个负载包含2个进程，其中每个进程又含有三个线程。    </p>
<pre><code>01  define fileset name=&quot;testF&quot;,entries=10000,filesize=16k,prealloc,path=&quot;/tmp&quot;
02
03  define process name=&quot;readerP&quot;,instances=2 {
04    thread name=&quot;readerT&quot;,instances=3 {
05      flowop openfile name=&quot;openOP&quot;,filesetname=&quot;testF&quot;
06      flowop readwholefile name=&quot;readOP&quot;,filesetname=&quot;testF&quot;
07      flowop closefile name=&quot;closeOP&quot;
08    }
09  }
10
11  run 60
</code></pre><p>第1行定义了一个fileset, 它位于/tmp，这个set有10,000个项，每个项大小为16k。</p>
<blockquote>
<p>Filebench is instructed to<br>precreate all files in the fileset before executing the actual workload.    </p>
</blockquote>
<p>3-4行定义了两个同样的进程，每个包含三个相同的线程。    </p>
<blockquote>
<p>Every thread in Filebench repeats flowops (operations)<br>defined in it in a loop.    </p>
</blockquote>
<p>5-7行描述了flowops:    </p>
<blockquote>
<p>open a file in “testF” fileset, read the file  completely, and close<br>it.    </p>
</blockquote>
<p>最后一行指定运行这个负载的时间为60s。    </p>
<blockquote>
<p>Assuming that the personality is saved in ‘readfiles.f’ file, one can then<br>generate corresponding workload by running ‘filebench -f readfiles.f’ command.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-filebench下载&quot;&gt;&lt;a href=&quot;#1-filebench下载&quot; class=&quot;headerlink&quot; title=&quot;1.filebench下载&quot;&gt;&lt;/a&gt;1.filebench下载&lt;/h2&gt;&lt;p&gt;客户端安装：&lt;a href=&quot;https://git
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>unlink元数据操作</title>
    <link href="http://yoursite.com/2017/08/24/unlink/"/>
    <id>http://yoursite.com/2017/08/24/unlink/</id>
    <published>2017-08-24T02:46:43.000Z</published>
    <updated>2017-11-03T07:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-客户端执行unlink："><a href="#1-客户端执行unlink：" class="headerlink" title="1.客户端执行unlink："></a>1.客户端执行unlink：</h3><p>nfs/dir.c: nfs_unlink</p>
<blockquote>
<p>silly rename:  Unix applications often open a <strong>scratch file</strong>(a temporary computer file that is created to hold information while a program is being used) and then unlink it. They do this so that the file is not visible in the file system name space to any other applications, and so that the system will automatically clean up (delete) the file when the application exits. This is known as “delete on last close”, and is a tradition among Unix applications.<br>Because of the design of the NFS protocol, there is no way for a file to be deleted from the name space but still remain in use by an application. Thus NFS clients have to emulate this using what already exists in the protocol. If an open file is unlinked, an NFS client renames it to a special name that looks like “.nfsXXXXX”. This “hides” the file while it remains in use. This is known as a “silly rename.” Note that NFS servers have nothing to do with this behavior.<br>After all applications on a client have closed the silly-renamed file, the client automatically finishes the unlink by deleting the file on the server. Generally this is effective, but if the client crashes before the file is removed, it will leave the .nfsXXXXX file. If you are sure that the applications using these files are no longer running, it is safe to delete these files manually.<br>The NFS version 4 protocol is stateful, and could actually support delete-on-last-close. Unfortunately there isn’t an easy way to do this and remain backwards-compatible with version 2 and 3 accessors.    </p>
</blockquote>
<p>nfs/dir.c: nfs_safe_remove </p>
<p>[ 2059.792582] NFS: unlink(0:14/4294967298, alink)<br>[ 2059.792584] NFS: safe_remove(/alink)    </p>
<p>nfs_safe_remove-&gt;nfs_unlink-&gt;nfs4_dir_inode_operations-&gt;nfs_v4_clientops<br>clp-&gt;ops = &amp;nfs_v4_clientops(nfs4_init_client)<br>nfs4_set_client<br>nfs4_init_server<br>nfs4_create_server</p>
<p>找nfs_safe_remove实际对应的函数 </p>
<pre><code>error = NFS_PROTO(dir)-&gt;remove(dir, &amp;dentry-&gt;d_name);
</code></pre><ol>
<li>return NFS_SERVER(inode)-&gt;nfs_client-&gt;rpc_ops</li>
<li>clp-&gt;rpc_ops = &amp;nfs_v4_clientops;</li>
</ol>
<p>remove实际对应的函数为：nfs4_proc_remove-&gt;_nfs4_proc_remove</p>
<p>_nfs4_proc_remove<br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/proc_remove.png" alt=""><br>enum编号21<br>nfs4_procedures[21]<br>PROC(REMOVE, ennc_remove, dec_remove)<br>.p_encode = nfs_xdr_enc_remove<br>.p_decode = nfs_xdr_dec_remove    </p>
<p>msg结构体的赋值完成    </p>
<p>nfs4_call_sync<br>clp-&gt;cl_call_sync = nfs4_call_sync_session</p>
<p>[ 1169.204021] –&gt;_nfs4_call_sync_session:       </p>
<p>nfs4_call_sync_sequence   </p>
<p>[ 1169.204024] –&gt;nfs4_call_sync_sequence:    </p>
<p>这里先省略一部分的说明，现在知道的是：task-&gt;tk_action实际执行的是nfs41_call_sync_prepare   </p>
<p>[ 1169.204030] –&gt; nfs41_call_sync_prepare data-&gt;clp-&gt;cl_session ffff88003bde6c00    </p>
<p>[ 1169.204034] –&gt; nfs4_setup_sequence clp ffff88003b92a000 session ffff88003bde6c00 sr_slotid 128   </p>
<p>[ 1169.204037] –&gt; nfs41_setup_sequence    </p>
<p>[ 1169.204040] –&gt; nfs4_find_slot used_slots=0000 highest_used=-1 max_slots=16<br>[ 1169.204043] &lt;– nfs4_find_slot used_slots=0001 highest_used=0 slotid=0<br>[ 1169.204046] &lt;– nfs41_setup_sequence slotid=0 seqid=33<br>[ 1169.204048] &lt;– nfs4_setup_sequence status=0    </p>
<h3 id="2-服务器端"><a href="#2-服务器端" class="headerlink" title="2.服务器端"></a>2.服务器端</h3><p>nfsd/nfssvc.c:nfsd()<br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/nfsd_remove.png" alt=""><br>svc_process()<br>svc_process_common()        </p>
<blockquote>
<p>[ 2062.505906] nfsd_dispatch: vers 4 proc 1</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-客户端执行unlink：&quot;&gt;&lt;a href=&quot;#1-客户端执行unlink：&quot; class=&quot;headerlink&quot; title=&quot;1.客户端执行unlink：&quot;&gt;&lt;/a&gt;1.客户端执行unlink：&lt;/h3&gt;&lt;p&gt;nfs/dir.c: nfs_unlink&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CLion中的apue编译问题</title>
    <link href="http://yoursite.com/2017/08/22/apue_h/"/>
    <id>http://yoursite.com/2017/08/22/apue_h/</id>
    <published>2017-08-22T03:59:53.000Z</published>
    <updated>2017-08-22T04:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触CLion, 编译apue里的文件时候出了问题，还是说”apue.h”找不到，err_sys这些没有。<br>网上有的写的东西简直是误人子弟，其实很简单，之前的操作已经把apue.h放到了/usr/include/目录下，我们要做的就是：<br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/apueh.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触CLion, 编译apue里的文件时候出了问题，还是说”apue.h”找不到，err_sys这些没有。&lt;br&gt;网上有的写的东西简直是误人子弟，其实很简单，之前的操作已经把apue.h放到了/usr/include/目录下，我们要做的就是：&lt;br&gt;&lt;img src=
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>apue_hole遇到的坑</title>
    <link href="http://yoursite.com/2017/08/22/apue_hole/"/>
    <id>http://yoursite.com/2017/08/22/apue_hole/</id>
    <published>2017-08-22T03:34:54.000Z</published>
    <updated>2017-08-29T08:38:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-编译c文件出错"><a href="#1-编译c文件出错" class="headerlink" title="1.编译c文件出错"></a>1.编译c文件出错</h2><p><strong>报错如下：</strong><br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/apue_hole.png" alt=""></p>
<p>看到<strong>clang error</strong></p>
<blockquote>
<p>clang是一个C、C++、Objective-C和Objective-C++编程语言的编译器前端。它采用了底层虚拟机（LLVM）作为其后端。</p>
</blockquote>
<p>然后用gcc编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc-7 -o hole file_hole.c</div></pre></td></tr></table></figure></p>
<p><strong>报错如下：</strong><br><img src="http://ous5r4na6.bkt.clouddn.com/static/images/apu_hole1.png" alt=""></p>
<p>额。。。再回去看源码发现是把creat函数写成了create…</p>
<p>改过来之后，ok<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  ~ ls -l file.hole		</div><div class="line">-rw-r--r--  1 xxx  staff  16394 Aug 22 11:48 file.hole    </div><div class="line">➜  ~ od -c file.hole</div><div class="line">0000000    a   b   c   d   e   f   g   h   i   j  \0  \0  \0  \0  \0  \0</div><div class="line">0000020   \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0  \0</div><div class="line">*</div><div class="line">0040000    A   B   C   D   E   F   G   H   I   J</div><div class="line">0040012</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-编译c文件出错&quot;&gt;&lt;a href=&quot;#1-编译c文件出错&quot; class=&quot;headerlink&quot; title=&quot;1.编译c文件出错&quot;&gt;&lt;/a&gt;1.编译c文件出错&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;报错如下：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http:/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sed用法</title>
    <link href="http://yoursite.com/2017/08/13/sed/"/>
    <id>http://yoursite.com/2017/08/13/sed/</id>
    <published>2017-08-13T07:26:01.000Z</published>
    <updated>2017-08-21T04:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><blockquote>
<p>sed is a stream editor. A stream editor is used to perform basic text transformations on an input stream (a file or input from a pipeline). While in some ways similar to an editor which permits scripted edits (such as ed), sed works by making only one pass over the input(s), and is consequently more efficient. But it is sed’s ability to filter text in a pipeline which particularly distinguishes it from other types of editors.    </p>
</blockquote>
<h2 id="1-删除指定行"><a href="#1-删除指定行" class="headerlink" title="1. 删除指定行"></a>1. 删除指定行</h2><p><strong>实例:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">line=$(cat /etc/exports | grep -n /bwfs/fs2 | grep -v &apos;#&apos; | awk &apos;BEGIN &#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&apos;)               </div><div class="line">if [ &quot;$line&quot; != &quot;0&quot; ]; then      </div><div class="line">    sed -i &apos;/fs2/d&apos; /etc/exports    </div><div class="line">fi</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sed&quot;&gt;&lt;a href=&quot;#sed&quot; class=&quot;headerlink&quot; title=&quot;sed&quot;&gt;&lt;/a&gt;sed&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;sed is a stream editor. A stream editor is used to pe
    
    </summary>
    
    
  </entry>
  
</feed>
